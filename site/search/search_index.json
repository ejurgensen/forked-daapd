{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1. forked-daapd forked-daapd is a Linux/FreeBSD DAAP (iTunes), MPD (Music Player Daemon) and RSP (Roku) media server. It supports AirPlay devices/speakers, Apple Remote (and compatibles), MPD clients, Chromecast, network streaming, internet radio, Spotify and LastFM. It does not support streaming video by AirPlay nor Chromecast. DAAP stands for Digital Audio Access Protocol which is the protocol used by iTunes and friends to share/stream media libraries over the network. forked-daapd is a complete rewrite of mt-daapd (Firefly Media Server). 1.1 Looking for help? Before you continue, make sure you know what version of forked-daapd you have, and what features it was built with (e.g. Spotify support). How to find out? Go to the web interface and check. No web interface? Then check the top of forked-daapd's log file (usually /var/log/forked-daapd.log). Note that you are viewing a snapshot of the instructions that may or may not match the version of forked-daapd that you are using. Go to references to find instructions for previous versions of forked-daapd. If you are looking for help on building forked-daapd (not using it), then please see the INSTALL file. 1.2 Contents Getting started Supported clients Web interface Using Remote AirPlay devices/speakers Chromecast Local audio through ALSA Local audio, Bluetooth and more through Pulseaudio MP3 network streaming (streaming to iOS) Remote access Supported formats Playlists and internet radio Artwork Library Command line Spotify LastFM MPD clients References 1.3 Getting started After installation (see INSTALL ) do the following: Edit the configuration file (usually /etc/forked-daapd.conf ) to suit your needs Start or restart the server (usually /etc/init.d/forked-daapd restart ) Go to the web interface http://forked-daapd.local:3689 , or, if that won't work, to http://[your_server_address_here]:3689 Wait for the library scan to complete If you will be using a remote, e.g. Apple Remote: Start the remote, go to Settings, Add Library Enter the pair code in the web interface (update the page with F5 if it does not automatically pick up the pairing request) 1.4 Supported clients forked-daapd supports these kinds of clients: DAAP clients, like iTunes or Rhythmbox Remote clients, like Apple Remote or compatibles for Android/Windows Phone AirPlay devices, like AirPort Express, Shairport and various AirPlay speakers Chromecast devices MPD clients, like mpc (see mpd-clients ) MP3 network stream clients, like VLC and almost any other music player RSP clients, like Roku Soundbridge Like iTunes, you can control forked-daapd with Remote and stream your music to AirPlay devices. A single forked-daapd instance can handle several clients concurrently, regardless of the protocol. By default all clients on 192.168.* (and the ipv6 equivalent) are allowed to connect without authentication. You can change that in the configuration file. Here is a list of working and non-working DAAP and Remote clients. The list is probably obsolete when you read it :-) Client Developer Type Platform Working (vers.) iTunes Apple DAAP Win Yes (12.10.1) Apple Music Apple DAAP MacOS Yes Rhythmbox Gnome DAAP Linux Yes Diapente diapente DAAP Android Yes WinAmp DAAPClient WardFamily DAAP WinAmp Yes Amarok w/DAAP plugin KDE DAAP Linux/Win Yes (2.8.0) Banshee DAAP Linux/Win/OSX No (2.6.2) jtunes4 DAAP Java No Firefly Client (DAAP) Java No Remote Apple Remote iOS Yes (4.3) Retune SquallyDoc Remote Android Yes (3.5.23) TunesRemote+ Melloware Remote Android Yes (2.5.3) Remote for iTunes Hyperfine Remote Android Yes Remote for Windows Phone Komodex Remote Windows Phone Yes (2.2.1.0) TunesRemote SE Remote Java Yes (r108) rtRemote for Windows bizmodeller Remote Windows Yes (1.2.0.67) 1.5 Web interface You can find forked-daapd's web interface at http://forked-daapd.local:3689 or alternatively at http://[your_server_address_here]:3689 . Use the web interface to control playback, trigger manual library rescans, pair with remotes, select speakers, authenticate with Spotify, etc. The Debian forked-daapd package does not include the web interface due to Debian packaging rules. You can find some screenshots and build instructions in README_PLAYER_WEBINTERFACE.md . 1.6 Using Remote Remote gets a list of output devices from the server; this list includes any and all devices on the network we know of that advertise AirPlay: AirPort Express, Apple TV, ... It also includes the local audio output, that is, the sound card on the server (even if there is no soundcard). If no output is selected when playback starts, forked-daapd will try to autoselect a device. forked-daapd remembers your selection and the individual volume for each output device; selected devices will be automatically re-selected, except if they return online during playback. 1.6.1 Pairing Open the web interface Start Remote, go to Settings, Add Library Enter the pair code in the web interface (update the page with F5 if it does not automatically pick up the pairing request) If Remote doesn't connect to forked-daapd after you entered the pairing code something went wrong. Check the log file to see the error message. Here are some common reasons: 1.6.1.1 You did not enter the correct pairing code You will see an error in the log about pairing failure with a HTTP response code that is not 0. Solution: Try again. 1.6.1.2 No response from Remote, possibly a network issue If you see an error in the log with either: - a HTTP response code that is 0 - \"Empty pairing request callback\" it means that forked-daapd could not establish a connection to Remote. This might be a network issue, your router may not be allowing multicast between the Remote device and the host forked-daapd is running on. Solution 1: Sometimes it resolves the issue if you force Remote to quit, restart it and do the pairing proces again. Another trick is to establish some other connection (eg SSH) from the iPod/iPhone/iPad to the host. Solution 2: Check your router settings if you can whitelist multicast addresses under IGMP settings. For Apple Bonjour, setting a multicast address of 224.0.0.251 and a netmask of 255.255.255.255 should work. Otherwise try using avahi-browse for troubleshooting: - in a terminal, run avahi-browse -r -k _touch-remote._tcp - start Remote, goto Settings, Add Library - after a couple seconds at most, you should get something similar to this: + ath0 IPv4 59eff13ea2f98dbbef6c162f9df71b784a3ef9a3 _touch-remote._tcp local = ath0 IPv4 59eff13ea2f98dbbef6c162f9df71b784a3ef9a3 _touch-remote._tcp local hostname = [Foobar.local] address = [192.168.1.1] port = [49160] txt = [\"DvTy=iPod touch\" \"RemN=Remote\" \"txtvers=1\" \"RemV=10000\" \"Pair=FAEA410630AEC05E\" \"DvNm=Foobar\"] Hit Ctrl-C to terminate avahi-browse. To check for network issues you can try to connect to address and port with telnet. 1.7 AirPlay devices/speakers forked-daapd will discover the AirPlay devices available on your network. For devices that are password-protected, the device's AirPlay name and password must be given in the configuration file. See the sample configuration file for the syntax. If your Apple TV requires device verification (always required by Apple TV4 with tvOS 10.2) then you can do that through the web interface: Select the device and then enter the PIN that the Apple TV displays. 1.8 Chromecast forked-daapd will discover Chromecast devices available on your network, and you can then select the device as a speaker. There is no configuration required. 1.9 Local audio through ALSA In the config file, you can select ALSA for local audio. This is the default. When using ALSA, the server will try to syncronize playback with AirPlay. You can adjust the syncronization in the config file. 1.10 Local audio, Bluetooth and more through Pulseaudio In the config file, you can select Pulseaudio for local audio. In addition to local audio, Pulseaudio also supports an array of other targets, e.g. Bluetooth or DLNA. However, Pulseaudio does require some setup, so here is a separate page with some help on that: README_PULSE.md Note that if you select Pulseaudio the \"card\" setting in the config file has no effect. Instead all soundcards detected by Pulseaudio will be listed as speakers by forked-daapd. You can adjust the latency of Pulseaudio playback in the config file. 1.11 MP3 network streaming (streaming to iOS) You can listen to audio being played by forked-daapd by opening this network stream address in pretty much any music player: http://[your hostname/ip address]:3689/stream.mp3 This is currently the only way of listening to your audio on iOS devices, since Apple does not allow AirPlay receiver apps, and because Apple Home Sharing cannot be supported by forked-daapd. So what you can do instead is install a music player app like VLC, connect to the stream and control playback with Remote. You can also use MPoD in \"On the go\"-mode, where control and playback is integrated in one app. Note that MP3 encoding must be supported by ffmpeg/libav for this to work. If it is not available you will see a message in the log file. In Debian/Ubuntu you get MP3 encoding support by installing the package \"libavcodec-extra\". 1.12 Remote access It is possible to access a shared library over the internet from a DAAP client like iTunes. You must have remote access to the host machine. First log in to the host and forward port 3689 to your local machine. You now need to broadcast the daap service to iTunes on your local machine. On macOS the command is: dns-sd -P iTunesServer _daap._tcp local 3689 localhost.local 127.0.0.1 \"ffid=12345\" The ffid key is required but its value does not matter. Your library will now appear as 'iTunesServer' in iTunes. 1.13 Supported formats forked-daapd should support pretty much all audio formats. It relies on libav (or ffmpeg) to extract metadata and decode the files on the fly when the client doesn't support the format. Formats are attributed a code, so any new format will need to be explicitely added. Currently supported: - MPEG4: mp4a, mp4v - AAC: alac - MP3 (and friends): mpeg - FLAC: flac - OGG VORBIS: ogg - Musepack: mpc - WMA: wma (WMA Pro), wmal (WMA Lossless), wmav (WMA video) - AIFF: aif - WAV: wav - Monkey's audio: ape 1.14 Playlists and internet radio forked-daapd supports M3U and PLS playlists. Just drop your playlist somewhere in your library with an .m3u or .pls extension and it will pick it up. If the playlist contains an http URL it will be added as an internet radio station, and the URL will be probed for Shoutcast (ICY) metadata. If the radio station provides artwork, forked-daapd will download it during playback and send it to any remotes or AirPlay devices requesting it. Instead of downloading M3U's from your radio stations, you can also make an empty M3U file and in it insert links to the M3U's of your radio stations. Support for iTunes Music Library XML format is available as a compile-time option. By default, metadata from our parsers is preferred over what's in the iTunes DB; use itunes_overrides = true if you prefer iTunes' metadata. forked-daapd has support for smart playlists. How to create a smart playlist is documented in README_SMARTPL.md . 1.15 Artwork forked-daapd has support for PNG and JPEG artwork which is either: - embedded in the media files - placed as separate image files in the library - made available online by the radio station For media in your library, forked-daapd will try to locate album and artist artwork (group artwork) by the following procedure: - if a file {artwork,cover,Folder}.{png,jpg} is found in one of the directories containing files that are part of the group, it is used as the artwork. The first file found is used, ordering is not guaranteed; - failing that, if [directory name].{png,jpg} is found in one of the directories containing files that are part of the group, it is used as the artwork. The first file found is used, ordering is not guaranteed; - failing that, individual files are examined and the first file found with an embedded artwork is used. Here again, ordering is not guaranteed. {artwork,cover,Folder} are the default, you can add other base names in the configuration file. Here you can also enable/disable support for individual file artwork (instead of using the same artwork for all tracks in an entire album). For playlists in your library, say /foo/bar.m3u, then for any http streams in the list, forked-daapd will look for /foo/bar.{jpg,png}. You can use symlinks for the artwork files. forked-daapd caches artwork in a separate cache file. The default path is /var/cache/forked-daapd/cache.db and can be configured in the configuration file. The cache.db file can be deleted without losing the library and pairing informations. 1.16 Library The library is scanned in bulk mode at startup, but the server will be available even while this scan is in progress. You can follow the progress of the scan in the log file or via the web interface. When the scan is complete you will see the log message: \"Bulk library scan completed in X sec\". The very first scan will take longer than subsequent startup scans, since every file gets analyzed. At the following startups the server looks for changed files and only analyzis those. Updates to the library are reflected in real time after the initial scan, so you do not need to manually start rescans. The directories are monitored for changes and rescanned on the fly. Note that if you have your library on a network mount then real time updating may not work. Read below about what to do in that case. If you change any of the directory settings in the library section of the configuration file a rescan is required before the new setting will take effect. You can do this by using \"Update library\" from the web interface. Symlinks are supported and dereferenced, but it is best to use them for directories only. 1.16.1 Pipes (for e.g. multiroom with Shairport-sync) Some programs, like for instance Shairport-sync, can be configured to output audio to a named pipe. If this pipe is placed in the library, forked-daapd will automatically detect that it is there, and when there is audio being written to it, playback of the audio will be autostarted (and stopped). Using this feature, forked-daapd can act as an AirPlay multiroom \"router\": You can have an AirPlay source (e.g. your iPhone) send audio Shairport-sync, which forwards it to forked-daapd through the pipe, which then plays it on whatever speakers you have selected (through Remote). The format of the audio being written to the pipe must be PCM16. You can also start playback of pipes manually. You will find them in remotes listed under \"Unknown artist\" and \"Unknown album\". The track title will be the name of the pipe. Shairport-sync can write metadata to a pipe, and forked-daapd can read this. This requires that the metadata pipe has the same filename as the audio pipe plus a \".metadata\" suffix. Say Shairport-sync is configured to write audio to \"/foo/bar/pipe\", then the metadata pipe should be \"/foo/bar/pipe.metadata\". 1.16.2 Libraries on network mounts Most network filesharing protocols do not offer notifications when the library is changed. So that means forked-daapd cannot update its database in real time. Instead you can schedule a cron job to update the database. The first step in doing this is to add two entries to the 'directories' configuration item in forked-daapd.conf: directories = { \"/some/local/dir\", \"/your/network/mount/library\" } Now you can make a cron job that runs this command: touch /some/local/dir/trigger.init-rescan When forked-daapd detects a file with filename ending .init-rescan it will perform a bulk scan similar to the startup scan. Alternatively, you can force a metadata scan of the library even if the files have not changed by creating a filename ending .meta-rescan . 1.16.3 Troubleshooting library issues If you place a file with the filename ending .full-rescan in your library, you can trigger a full rescan of your library. This will clear all music and playlists from forked-daapd's database and initiate a fresh bulk scan. Pairing and speaker information will be kept. Only use this for troubleshooting, it is not necessary during normal operation. 1.17 Command line You can choose between: a MPD command line client (easiest) like mpc curl with forked-daapd's JSON API (see README_JSON_API.md ) curl with DAAP/DACP commands (hardest) Here is an example of how to use curl with DAAP/DACP. Say you have a playlist with a radio station, and you want to make a script that starts playback of that station: Run sqlite3 [your forked-daapd db] . Use select id,title from files to get the id of the radio station, and use select id,title from playlists to get the id of the playlist. Convert the two ids to hex. Put the following lines in the script with the relevant ids inserted (also observe that you must use a session-id < 100, and that you must login and logout): curl \"http://localhost:3689/login?pairing-guid=0x1&request-session-id=50\" curl \"http://localhost:3689/ctrl-int/1/playspec?database-spec='dmap.persistentid:0x1'&container-spec='dmap.persistentid:0x[PLAYLIST-ID]'&container-item-spec='dmap.containeritemid:0x[FILE ID]'&session-id=50\" curl \"http://localhost:3689/logout?session-id=50\" 1.18 Spotify forked-daapd has support for playback of the tracks in your Spotify library. Go to the web interface and check that your version of forked-daapd was built with Spotify support. You must have a Spotify premium account. If you normally log into Spotify with your Facebook account you must first go to Spotify's web site where you can get the Spotify username and password that matches your account. Make sure you have libspotify installed. Unfortunately, it is no longer available from Spotify, and at the time of writing this they have not provided an alternative. However, on most Debian-based platforms, you can still get it like this: Add the mopidy repository, see instructions Install with apt install libspotify-dev Once the above is in order you can login to Spotify via the web interface. The procedure for logging in to Spotify is a two-step procedure due to the current state of libspotify, but the web interface makes both steps available to you. Spotify will automatically notify forked-daapd about playlist updates, so you should not need to restart forked-daapd to syncronize with Spotify. However, Spotify only notifies about playlist updates, not new saved tracks/albums, so you need to manually trigger a rescan to get those. forked-daapd will not store your password, but will still be able to log you in automatically afterwards, because libspotify saves a login token. You can configure the location of your Spotify user data in the configuration file. To permanently logout and remove credentials, delete the contents of /var/cache/forked-daapd/libspotify (while forked-daapd is stopped). Limitations: You will not be able to do any playlist management through forked-daapd - use a Spotify client for that. You also can only listen to your music by letting forked-daapd do the playback - so that means you can't stream from forked-daapd to iTunes. 1.19 LastFM You can have forked-daapd scrobble the music you listen to. To set up scrobbling go to the web interface and authorize forked-daapd with your LastFM credentials. forked-daapd will not store your LastFM username/password, only the session key. The session key does not expire. 1.20 MPD clients You can - to some extent - use clients for MPD to control forked-daapd. By default forked-daapd listens on port 6600 for MPD clients. You can change this in the configuration file. Currently only a subset of the commands offered by MPD (see MPD protocol documentation ) are supported by forked-daapd. Due to some differences between forked-daapd and MPD not all commands will act the same way they would running MPD: crossfade, mixrampdb, mixrampdelay and replaygain will have no effect single, repeat: unlike MPD forked-daapd does not support setting single and repeat separately on/off, instead repeat off, repeat all and repeat single are supported. Thus setting single on will result in repeat single, repeat on results in repeat all. The following table shows what is working for a selection of MPD clients: Client Type Status mpc CLI Working commands: mpc, add, crop, current, del (ranges are not yet supported), play, next, prev (behaves like cdprev), pause, toggle, cdprev, seek, clear, outputs, enable, disable, playlist, ls, load, volume, repeat, random, single, search, find, list, update (initiates an init-rescan, the path argument is not supported) ympd Web Everything except \"add stream\" should work 1.21 References The source for this version of forked-daapd can be found here: https://github.com/ejurgensen/forked-daapd.git The original (now unmaintained) source can be found here: http://git.debian.org/?p=users/jblache/forked-daapd.git README's for previous versions of forked-daapd: forked-daapd version 26.5 forked-daapd version 26.4 forked-daapd version 26.3 forked-daapd version 26.2 forked-daapd version 26.1 forked-daapd version 26.0 forked-daapd version 25.0 forked-daapd version 24.2 forked-daapd version 24.1 2. Welcome to MkDocs For full documentation visit mkdocs.org . !!GET /pet/{petId}!! 2.1 Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. 2.2 Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#1-forked-daapd","text":"forked-daapd is a Linux/FreeBSD DAAP (iTunes), MPD (Music Player Daemon) and RSP (Roku) media server. It supports AirPlay devices/speakers, Apple Remote (and compatibles), MPD clients, Chromecast, network streaming, internet radio, Spotify and LastFM. It does not support streaming video by AirPlay nor Chromecast. DAAP stands for Digital Audio Access Protocol which is the protocol used by iTunes and friends to share/stream media libraries over the network. forked-daapd is a complete rewrite of mt-daapd (Firefly Media Server).","title":"1. forked-daapd"},{"location":"#11-looking-for-help","text":"Before you continue, make sure you know what version of forked-daapd you have, and what features it was built with (e.g. Spotify support). How to find out? Go to the web interface and check. No web interface? Then check the top of forked-daapd's log file (usually /var/log/forked-daapd.log). Note that you are viewing a snapshot of the instructions that may or may not match the version of forked-daapd that you are using. Go to references to find instructions for previous versions of forked-daapd. If you are looking for help on building forked-daapd (not using it), then please see the INSTALL file.","title":"1.1 Looking for help?"},{"location":"#12-contents","text":"Getting started Supported clients Web interface Using Remote AirPlay devices/speakers Chromecast Local audio through ALSA Local audio, Bluetooth and more through Pulseaudio MP3 network streaming (streaming to iOS) Remote access Supported formats Playlists and internet radio Artwork Library Command line Spotify LastFM MPD clients References","title":"1.2 Contents"},{"location":"#13-getting-started","text":"After installation (see INSTALL ) do the following: Edit the configuration file (usually /etc/forked-daapd.conf ) to suit your needs Start or restart the server (usually /etc/init.d/forked-daapd restart ) Go to the web interface http://forked-daapd.local:3689 , or, if that won't work, to http://[your_server_address_here]:3689 Wait for the library scan to complete If you will be using a remote, e.g. Apple Remote: Start the remote, go to Settings, Add Library Enter the pair code in the web interface (update the page with F5 if it does not automatically pick up the pairing request)","title":"1.3 Getting started"},{"location":"#14-supported-clients","text":"forked-daapd supports these kinds of clients: DAAP clients, like iTunes or Rhythmbox Remote clients, like Apple Remote or compatibles for Android/Windows Phone AirPlay devices, like AirPort Express, Shairport and various AirPlay speakers Chromecast devices MPD clients, like mpc (see mpd-clients ) MP3 network stream clients, like VLC and almost any other music player RSP clients, like Roku Soundbridge Like iTunes, you can control forked-daapd with Remote and stream your music to AirPlay devices. A single forked-daapd instance can handle several clients concurrently, regardless of the protocol. By default all clients on 192.168.* (and the ipv6 equivalent) are allowed to connect without authentication. You can change that in the configuration file. Here is a list of working and non-working DAAP and Remote clients. The list is probably obsolete when you read it :-) Client Developer Type Platform Working (vers.) iTunes Apple DAAP Win Yes (12.10.1) Apple Music Apple DAAP MacOS Yes Rhythmbox Gnome DAAP Linux Yes Diapente diapente DAAP Android Yes WinAmp DAAPClient WardFamily DAAP WinAmp Yes Amarok w/DAAP plugin KDE DAAP Linux/Win Yes (2.8.0) Banshee DAAP Linux/Win/OSX No (2.6.2) jtunes4 DAAP Java No Firefly Client (DAAP) Java No Remote Apple Remote iOS Yes (4.3) Retune SquallyDoc Remote Android Yes (3.5.23) TunesRemote+ Melloware Remote Android Yes (2.5.3) Remote for iTunes Hyperfine Remote Android Yes Remote for Windows Phone Komodex Remote Windows Phone Yes (2.2.1.0) TunesRemote SE Remote Java Yes (r108) rtRemote for Windows bizmodeller Remote Windows Yes (1.2.0.67)","title":"1.4 Supported clients"},{"location":"#15-web-interface","text":"You can find forked-daapd's web interface at http://forked-daapd.local:3689 or alternatively at http://[your_server_address_here]:3689 . Use the web interface to control playback, trigger manual library rescans, pair with remotes, select speakers, authenticate with Spotify, etc. The Debian forked-daapd package does not include the web interface due to Debian packaging rules. You can find some screenshots and build instructions in README_PLAYER_WEBINTERFACE.md .","title":"1.5 Web interface"},{"location":"#16-using-remote","text":"Remote gets a list of output devices from the server; this list includes any and all devices on the network we know of that advertise AirPlay: AirPort Express, Apple TV, ... It also includes the local audio output, that is, the sound card on the server (even if there is no soundcard). If no output is selected when playback starts, forked-daapd will try to autoselect a device. forked-daapd remembers your selection and the individual volume for each output device; selected devices will be automatically re-selected, except if they return online during playback.","title":"1.6 Using Remote"},{"location":"#161-pairing","text":"Open the web interface Start Remote, go to Settings, Add Library Enter the pair code in the web interface (update the page with F5 if it does not automatically pick up the pairing request) If Remote doesn't connect to forked-daapd after you entered the pairing code something went wrong. Check the log file to see the error message. Here are some common reasons:","title":"1.6.1 Pairing"},{"location":"#1611-you-did-not-enter-the-correct-pairing-code","text":"You will see an error in the log about pairing failure with a HTTP response code that is not 0. Solution: Try again.","title":"1.6.1.1 You did not enter the correct pairing code"},{"location":"#1612-no-response-from-remote-possibly-a-network-issue","text":"If you see an error in the log with either: - a HTTP response code that is 0 - \"Empty pairing request callback\" it means that forked-daapd could not establish a connection to Remote. This might be a network issue, your router may not be allowing multicast between the Remote device and the host forked-daapd is running on. Solution 1: Sometimes it resolves the issue if you force Remote to quit, restart it and do the pairing proces again. Another trick is to establish some other connection (eg SSH) from the iPod/iPhone/iPad to the host. Solution 2: Check your router settings if you can whitelist multicast addresses under IGMP settings. For Apple Bonjour, setting a multicast address of 224.0.0.251 and a netmask of 255.255.255.255 should work. Otherwise try using avahi-browse for troubleshooting: - in a terminal, run avahi-browse -r -k _touch-remote._tcp - start Remote, goto Settings, Add Library - after a couple seconds at most, you should get something similar to this: + ath0 IPv4 59eff13ea2f98dbbef6c162f9df71b784a3ef9a3 _touch-remote._tcp local = ath0 IPv4 59eff13ea2f98dbbef6c162f9df71b784a3ef9a3 _touch-remote._tcp local hostname = [Foobar.local] address = [192.168.1.1] port = [49160] txt = [\"DvTy=iPod touch\" \"RemN=Remote\" \"txtvers=1\" \"RemV=10000\" \"Pair=FAEA410630AEC05E\" \"DvNm=Foobar\"] Hit Ctrl-C to terminate avahi-browse. To check for network issues you can try to connect to address and port with telnet.","title":"1.6.1.2 No response from Remote, possibly a network issue"},{"location":"#17-airplay-devicesspeakers","text":"forked-daapd will discover the AirPlay devices available on your network. For devices that are password-protected, the device's AirPlay name and password must be given in the configuration file. See the sample configuration file for the syntax. If your Apple TV requires device verification (always required by Apple TV4 with tvOS 10.2) then you can do that through the web interface: Select the device and then enter the PIN that the Apple TV displays.","title":"1.7 AirPlay devices/speakers"},{"location":"#18-chromecast","text":"forked-daapd will discover Chromecast devices available on your network, and you can then select the device as a speaker. There is no configuration required.","title":"1.8 Chromecast"},{"location":"#19-local-audio-through-alsa","text":"In the config file, you can select ALSA for local audio. This is the default. When using ALSA, the server will try to syncronize playback with AirPlay. You can adjust the syncronization in the config file.","title":"1.9 Local audio through ALSA"},{"location":"#110-local-audio-bluetooth-and-more-through-pulseaudio","text":"In the config file, you can select Pulseaudio for local audio. In addition to local audio, Pulseaudio also supports an array of other targets, e.g. Bluetooth or DLNA. However, Pulseaudio does require some setup, so here is a separate page with some help on that: README_PULSE.md Note that if you select Pulseaudio the \"card\" setting in the config file has no effect. Instead all soundcards detected by Pulseaudio will be listed as speakers by forked-daapd. You can adjust the latency of Pulseaudio playback in the config file.","title":"1.10 Local audio, Bluetooth and more through Pulseaudio"},{"location":"#111-mp3-network-streaming-streaming-to-ios","text":"You can listen to audio being played by forked-daapd by opening this network stream address in pretty much any music player: http://[your hostname/ip address]:3689/stream.mp3 This is currently the only way of listening to your audio on iOS devices, since Apple does not allow AirPlay receiver apps, and because Apple Home Sharing cannot be supported by forked-daapd. So what you can do instead is install a music player app like VLC, connect to the stream and control playback with Remote. You can also use MPoD in \"On the go\"-mode, where control and playback is integrated in one app. Note that MP3 encoding must be supported by ffmpeg/libav for this to work. If it is not available you will see a message in the log file. In Debian/Ubuntu you get MP3 encoding support by installing the package \"libavcodec-extra\".","title":"1.11 MP3 network streaming (streaming to iOS)"},{"location":"#112-remote-access","text":"It is possible to access a shared library over the internet from a DAAP client like iTunes. You must have remote access to the host machine. First log in to the host and forward port 3689 to your local machine. You now need to broadcast the daap service to iTunes on your local machine. On macOS the command is: dns-sd -P iTunesServer _daap._tcp local 3689 localhost.local 127.0.0.1 \"ffid=12345\" The ffid key is required but its value does not matter. Your library will now appear as 'iTunesServer' in iTunes.","title":"1.12 Remote access"},{"location":"#113-supported-formats","text":"forked-daapd should support pretty much all audio formats. It relies on libav (or ffmpeg) to extract metadata and decode the files on the fly when the client doesn't support the format. Formats are attributed a code, so any new format will need to be explicitely added. Currently supported: - MPEG4: mp4a, mp4v - AAC: alac - MP3 (and friends): mpeg - FLAC: flac - OGG VORBIS: ogg - Musepack: mpc - WMA: wma (WMA Pro), wmal (WMA Lossless), wmav (WMA video) - AIFF: aif - WAV: wav - Monkey's audio: ape","title":"1.13 Supported formats"},{"location":"#114-playlists-and-internet-radio","text":"forked-daapd supports M3U and PLS playlists. Just drop your playlist somewhere in your library with an .m3u or .pls extension and it will pick it up. If the playlist contains an http URL it will be added as an internet radio station, and the URL will be probed for Shoutcast (ICY) metadata. If the radio station provides artwork, forked-daapd will download it during playback and send it to any remotes or AirPlay devices requesting it. Instead of downloading M3U's from your radio stations, you can also make an empty M3U file and in it insert links to the M3U's of your radio stations. Support for iTunes Music Library XML format is available as a compile-time option. By default, metadata from our parsers is preferred over what's in the iTunes DB; use itunes_overrides = true if you prefer iTunes' metadata. forked-daapd has support for smart playlists. How to create a smart playlist is documented in README_SMARTPL.md .","title":"1.14 Playlists and internet radio"},{"location":"#115-artwork","text":"forked-daapd has support for PNG and JPEG artwork which is either: - embedded in the media files - placed as separate image files in the library - made available online by the radio station For media in your library, forked-daapd will try to locate album and artist artwork (group artwork) by the following procedure: - if a file {artwork,cover,Folder}.{png,jpg} is found in one of the directories containing files that are part of the group, it is used as the artwork. The first file found is used, ordering is not guaranteed; - failing that, if [directory name].{png,jpg} is found in one of the directories containing files that are part of the group, it is used as the artwork. The first file found is used, ordering is not guaranteed; - failing that, individual files are examined and the first file found with an embedded artwork is used. Here again, ordering is not guaranteed. {artwork,cover,Folder} are the default, you can add other base names in the configuration file. Here you can also enable/disable support for individual file artwork (instead of using the same artwork for all tracks in an entire album). For playlists in your library, say /foo/bar.m3u, then for any http streams in the list, forked-daapd will look for /foo/bar.{jpg,png}. You can use symlinks for the artwork files. forked-daapd caches artwork in a separate cache file. The default path is /var/cache/forked-daapd/cache.db and can be configured in the configuration file. The cache.db file can be deleted without losing the library and pairing informations.","title":"1.15 Artwork"},{"location":"#116-library","text":"The library is scanned in bulk mode at startup, but the server will be available even while this scan is in progress. You can follow the progress of the scan in the log file or via the web interface. When the scan is complete you will see the log message: \"Bulk library scan completed in X sec\". The very first scan will take longer than subsequent startup scans, since every file gets analyzed. At the following startups the server looks for changed files and only analyzis those. Updates to the library are reflected in real time after the initial scan, so you do not need to manually start rescans. The directories are monitored for changes and rescanned on the fly. Note that if you have your library on a network mount then real time updating may not work. Read below about what to do in that case. If you change any of the directory settings in the library section of the configuration file a rescan is required before the new setting will take effect. You can do this by using \"Update library\" from the web interface. Symlinks are supported and dereferenced, but it is best to use them for directories only.","title":"1.16 Library"},{"location":"#1161-pipes-for-eg-multiroom-with-shairport-sync","text":"Some programs, like for instance Shairport-sync, can be configured to output audio to a named pipe. If this pipe is placed in the library, forked-daapd will automatically detect that it is there, and when there is audio being written to it, playback of the audio will be autostarted (and stopped). Using this feature, forked-daapd can act as an AirPlay multiroom \"router\": You can have an AirPlay source (e.g. your iPhone) send audio Shairport-sync, which forwards it to forked-daapd through the pipe, which then plays it on whatever speakers you have selected (through Remote). The format of the audio being written to the pipe must be PCM16. You can also start playback of pipes manually. You will find them in remotes listed under \"Unknown artist\" and \"Unknown album\". The track title will be the name of the pipe. Shairport-sync can write metadata to a pipe, and forked-daapd can read this. This requires that the metadata pipe has the same filename as the audio pipe plus a \".metadata\" suffix. Say Shairport-sync is configured to write audio to \"/foo/bar/pipe\", then the metadata pipe should be \"/foo/bar/pipe.metadata\".","title":"1.16.1 Pipes (for e.g. multiroom with Shairport-sync)"},{"location":"#1162-libraries-on-network-mounts","text":"Most network filesharing protocols do not offer notifications when the library is changed. So that means forked-daapd cannot update its database in real time. Instead you can schedule a cron job to update the database. The first step in doing this is to add two entries to the 'directories' configuration item in forked-daapd.conf: directories = { \"/some/local/dir\", \"/your/network/mount/library\" } Now you can make a cron job that runs this command: touch /some/local/dir/trigger.init-rescan When forked-daapd detects a file with filename ending .init-rescan it will perform a bulk scan similar to the startup scan. Alternatively, you can force a metadata scan of the library even if the files have not changed by creating a filename ending .meta-rescan .","title":"1.16.2 Libraries on network mounts"},{"location":"#1163-troubleshooting-library-issues","text":"If you place a file with the filename ending .full-rescan in your library, you can trigger a full rescan of your library. This will clear all music and playlists from forked-daapd's database and initiate a fresh bulk scan. Pairing and speaker information will be kept. Only use this for troubleshooting, it is not necessary during normal operation.","title":"1.16.3 Troubleshooting library issues"},{"location":"#117-command-line","text":"You can choose between: a MPD command line client (easiest) like mpc curl with forked-daapd's JSON API (see README_JSON_API.md ) curl with DAAP/DACP commands (hardest) Here is an example of how to use curl with DAAP/DACP. Say you have a playlist with a radio station, and you want to make a script that starts playback of that station: Run sqlite3 [your forked-daapd db] . Use select id,title from files to get the id of the radio station, and use select id,title from playlists to get the id of the playlist. Convert the two ids to hex. Put the following lines in the script with the relevant ids inserted (also observe that you must use a session-id < 100, and that you must login and logout): curl \"http://localhost:3689/login?pairing-guid=0x1&request-session-id=50\" curl \"http://localhost:3689/ctrl-int/1/playspec?database-spec='dmap.persistentid:0x1'&container-spec='dmap.persistentid:0x[PLAYLIST-ID]'&container-item-spec='dmap.containeritemid:0x[FILE ID]'&session-id=50\" curl \"http://localhost:3689/logout?session-id=50\"","title":"1.17 Command line"},{"location":"#118-spotify","text":"forked-daapd has support for playback of the tracks in your Spotify library. Go to the web interface and check that your version of forked-daapd was built with Spotify support. You must have a Spotify premium account. If you normally log into Spotify with your Facebook account you must first go to Spotify's web site where you can get the Spotify username and password that matches your account. Make sure you have libspotify installed. Unfortunately, it is no longer available from Spotify, and at the time of writing this they have not provided an alternative. However, on most Debian-based platforms, you can still get it like this: Add the mopidy repository, see instructions Install with apt install libspotify-dev Once the above is in order you can login to Spotify via the web interface. The procedure for logging in to Spotify is a two-step procedure due to the current state of libspotify, but the web interface makes both steps available to you. Spotify will automatically notify forked-daapd about playlist updates, so you should not need to restart forked-daapd to syncronize with Spotify. However, Spotify only notifies about playlist updates, not new saved tracks/albums, so you need to manually trigger a rescan to get those. forked-daapd will not store your password, but will still be able to log you in automatically afterwards, because libspotify saves a login token. You can configure the location of your Spotify user data in the configuration file. To permanently logout and remove credentials, delete the contents of /var/cache/forked-daapd/libspotify (while forked-daapd is stopped). Limitations: You will not be able to do any playlist management through forked-daapd - use a Spotify client for that. You also can only listen to your music by letting forked-daapd do the playback - so that means you can't stream from forked-daapd to iTunes.","title":"1.18 Spotify"},{"location":"#119-lastfm","text":"You can have forked-daapd scrobble the music you listen to. To set up scrobbling go to the web interface and authorize forked-daapd with your LastFM credentials. forked-daapd will not store your LastFM username/password, only the session key. The session key does not expire.","title":"1.19 LastFM"},{"location":"#120-mpd-clients","text":"You can - to some extent - use clients for MPD to control forked-daapd. By default forked-daapd listens on port 6600 for MPD clients. You can change this in the configuration file. Currently only a subset of the commands offered by MPD (see MPD protocol documentation ) are supported by forked-daapd. Due to some differences between forked-daapd and MPD not all commands will act the same way they would running MPD: crossfade, mixrampdb, mixrampdelay and replaygain will have no effect single, repeat: unlike MPD forked-daapd does not support setting single and repeat separately on/off, instead repeat off, repeat all and repeat single are supported. Thus setting single on will result in repeat single, repeat on results in repeat all. The following table shows what is working for a selection of MPD clients: Client Type Status mpc CLI Working commands: mpc, add, crop, current, del (ranges are not yet supported), play, next, prev (behaves like cdprev), pause, toggle, cdprev, seek, clear, outputs, enable, disable, playlist, ls, load, volume, repeat, random, single, search, find, list, update (initiates an init-rescan, the path argument is not supported) ympd Web Everything except \"add stream\" should work","title":"1.20 MPD clients"},{"location":"#121-references","text":"The source for this version of forked-daapd can be found here: https://github.com/ejurgensen/forked-daapd.git The original (now unmaintained) source can be found here: http://git.debian.org/?p=users/jblache/forked-daapd.git README's for previous versions of forked-daapd: forked-daapd version 26.5 forked-daapd version 26.4 forked-daapd version 26.3 forked-daapd version 26.2 forked-daapd version 26.1 forked-daapd version 26.0 forked-daapd version 25.0 forked-daapd version 24.2 forked-daapd version 24.1","title":"1.21 References"},{"location":"#2-welcome-to-mkdocs","text":"For full documentation visit mkdocs.org . !!GET /pet/{petId}!!","title":"2. Welcome to MkDocs"},{"location":"#21-commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"2.1 Commands"},{"location":"#22-project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"2.2 Project layout"},{"location":"README_ALSA/","text":"1. forked-daapd and ALSA ALSA is one of the main output configuration options for local audio; when using ALSA you will typically let the system select the soundcard on your machine as the default device/sound card - a mixer associated with the ALSA device is used for volume control. However if your machine has multiple sound cards and your system chooses the wrong playback device, you will need to manually select the card and mixer to complete the forked daapd configuration. # example audio section for server audio { nickname = \"Computer\" type = \"alsa\" card = \"hw:1\" # defaults to 'default' mixer = \"Analogue\" # defaults to 'PCM' or 'Master' mixer_device = \"hw:1\" # defaults to same as 'card' value } To verify if the default sound device is correct for playback, we will use the aplay utility. # generate some audio if you don't have a wav file to hand $ sox -n -c 2 -r 44100 -b 16 -C 128 /tmp/sine441.wav synth 30 sin 500-100 fade h 0.2 30 0.2 $ aplay -Ddefault /tmp/sine441.wav If you can hear music played then you are good to use default for the server configuration. If you can not hear anything from the aplay firstly verify (using alsamixer ) that the sound card is not muted. If the card is not muted AND there is no sound you can try the options below to determine the card and mixer for configuring the server. The example below is how I determined the correct sound card and mixer values for a Raspberry Pi that has an additional DAC card (hat) mounted. 1.1 Determining the sound cards you have / ALSA can see Use aplay -l to list all the sound cards and their order as known to the system - you can have multiple card X, device Y entries; some cards can also have multiple playback devices such as the RPI's onboard soundcard which feeds both headphone (card 0, device 0) and HDMI (card 0, device 1). $ aplay -l **** List of PLAYBACK Hardware Devices **** card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA] Subdevices: 6/7 Subdevice #0: subdevice #0 Subdevice #1: subdevice #1 Subdevice #2: subdevice #2 Subdevice #3: subdevice #3 Subdevice #4: subdevice #4 Subdevice #5: subdevice #5 Subdevice #6: subdevice #6 card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI] Subdevices: 1/1 Subdevice #0: subdevice #0 card 1: IQaudIODAC [IQaudIODAC], device 0: IQaudIO DAC HiFi pcm512x-hifi-0 [] Subdevices: 1/1 Subdevice #0: subdevice #0 On this machine we see the second sound card installed, an IQaudIODAC dac hat, and identified as card 1 device 0 . This is the playback device we want to be used by the server. In ALSA configuration terms card X, device Y is known as hw:X,Y which is the format used for the server configuration: hw:1,0 is the IQaudIODAC that we want to use - we verify audiable playback through that sound card using aplay -Dhw:1 /tmp/sine441.wav . If the card has only one device, we can simply refer to the sound card using hw:X so in this case where the IQaudIODAC only has one device, we can refer to this card as hw:1 or hw:1,0 . Use aplay -L to get more information about the PCM devices defined on the system. $ aplay -L null Discard all samples (playback) or generate zero samples (capture) default:CARD=ALSA bcm2835 ALSA, bcm2835 ALSA Default Audio Device sysdefault:CARD=ALSA bcm2835 ALSA, bcm2835 ALSA Default Audio Device dmix:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Direct sample mixing device dmix:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Direct sample mixing device dsnoop:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Direct sample snooping device dsnoop:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Direct sample snooping device hw:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Direct hardware device without any conversions hw:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Direct hardware device without any conversions plughw:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Hardware device with all software conversions plughw:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Hardware device with all software conversions default:CARD=IQaudIODAC IQaudIODAC, Default Audio Device sysdefault:CARD=IQaudIODAC IQaudIODAC, Default Audio Device dmix:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Direct sample mixing device dsnoop:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Direct sample snooping device hw:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Direct hardware device without any conversions plughw:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Hardware device with all software conversions For the server configuration, we will use: audio { nickname = \"Computer\" type = \"alsa\" card=\"hw:1\" # mixer=TBD # mixer_device=TBD } 1.2 Mixer name Once you have the card number (determined from aplay -l ) we can inspect/confirm the name of the mixer (it may NOT be PCM as expected by the server). In this example, the card 1 is of interest and thus we use -c 1 with the following command: $ amixer -c 1 Simple mixer control 'DSP Program',0 Capabilities: enum Items: 'FIR interpolation with de-emphasis' 'Low latency IIR with de-emphasis' 'High attenuation with de-emphasis' 'Fixed process flow' 'Ringing-less low latency FIR' Item0: 'Ringing-less low latency FIR' Simple mixer control 'Analogue',0 Capabilities: pvolume Playback channels: Front Left - Front Right Limits: Playback 0 - 1 Mono: Front Left: Playback 1 [100%] [0.00dB] Front Right: Playback 1 [100%] [0.00dB] Simple mixer control 'Analogue Playback Boost',0 Capabilities: volume Playback channels: Front Left - Front Right Capture channels: Front Left - Front Right Limits: 0 - 1 Front Left: 0 [0%] [0.00dB] Front Right: 0 [0%] [0.00dB] ... This card has multiple controls but we want the first mixer listed with a pvolume capability - in this case that mixer value required for the server configuration is called Anaolgue . For the server configuration, we will use: audio { nickname = \"Computer\" type = \"alsa\" card=\"hw:1\" mixer=\"Analogue\" # mixer_device=TBD } 1.3 Mixer device This is the name of the underlying physical device used for the mixer - it is typically the same value as the value of card in which case a value is not required by the server configuration. An example of when you want to change explicitly configure this is if you need to use a dmix device (see below). 1.4 Handling Devices that cannot concurrently play multiple audio streams Some devices such as various RPI DAC boards (IQaudio DAC, Allo Boss DAC...) can not have multiple streams openned at the same time/cannot play multiple sound files at the same time: this results in Device or resource busy errors. You can confirm if your sound card has this problem by using the example below once have determined the names/cards information as above. Using our hw:1 device we try: # generate some audio $ sox -n -c 2 -r 44100 -b 16 -C 128 /tmp/sine441.wav synth 30 sin 500-100 fade h 0.2 30 0.2 # attempt to play 2 files at the same time $ aplay -v -Dhw:1 /tmp/sine441.wav & Playing WAVE '/tmp/sine441.wav' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo Hardware PCM card 1 'IQaudIODAC' device 0 subdevice 0 Its setup is: stream : PLAYBACK access : RW_INTERLEAVED format : S16_LE subformat : STD channels : 2 rate : 44100 exact rate : 44100 (44100/1) msbits : 16 buffer_size : 22052 period_size : 5513 period_time : 125011 tstamp_mode : NONE tstamp_type : MONOTONIC period_step : 1 avail_min : 5513 period_event : 0 start_threshold : 22052 stop_threshold : 22052 silence_threshold: 0 silence_size : 0 boundary : 1445199872 appl_ptr : 0 hw_ptr : 0 $ aplay -v -Dhw:1 /tmp/sine441.wav aplay: main:788: audio open error: Device or resource busy In this instance this device can not open multiple streams - forked-daapd can handle this situation transparently with some audio being truncated from the end of the current file as the server prepares to play the following track. If this handling is causing you problems you may wish to use ALSA's dmix functionally which provides a software mixing module. We will need to define a dmix component and configure the server to use that as it's sound card. The downside to the dmix approach will be the need to fix a samplerate (48000 being the default) for this software mixing module meaning any files that have a mismatched samplerate will be resampled. 1.5 ALSA dmix configuration/setup A dmix device can be defined in /etc/asound.conf or ~/.asoundrc . We will need to know the underlying physical soundcard to be used: in our examples above, hw:1,0 / card 1, device 0 representing our IQaudIODAC as per output of aplay -l . We also take the buffer_size and period_size from the output of playing a sound file via aplay -v . # use 'dac' as the name of the device: \"aplay -Ddac ....\" pcm.!dac { type plug slave.pcm \"dmixer\" hint.description \"IQAudio DAC s/w dmix enabled device\" } pcm.dmixer { type dmix ipc_key 1024 # need to be uniq value ipc_key_add_uid false # multiple concurrent different users ipc_perm 0666 # multi-user sharing permissions slave { pcm \"hw:1,0\" # points at the underlying device - could also simply be hw:1 period_time 0 period_size 4096 # from the output of aplay -v buffer_size 22052 # from the output of aplay -v rate 44100 # locked in sample rate for resampling on dmix device } hint.description \"IQAudio DAC s/w dmix device\" } ctl.dmixer { type hw card 1 # underlying device device 0 } Running aplay -L we will see our newly defined devices dac and dmixer $ aplay -L null Discard all samples (playback) or generate zero samples (capture) dac IQAudio DAC s/w dmix enabled device dmixer IQAudio DAC s/w dmix device default:CARD=ALSA bcm2835 ALSA, bcm2835 ALSA Default Audio Device ... At this point we are able to rerun the concurrent aplay commands (adding -Ddac to specify the playback device to use) to verify ALSA configuration. If there is only one card on the machine you may use pcm.!default instead of pcm.!dac - there is less configuration to be done later since many ALSA applications will use the device called default by default. Furthermore on RPI you can explicitly disable the onboard sound card to leave us with only the IQaudIODAC board enabled (won't affect HDMI sound output) by commenting out #dtparam=audio=on in /boot/config.txt and rebooting. 1.5.1 forked-daapd config with dmix We will use the newly defined card named dac which uses the underlying hw:1 device as per /etc/asound.conf or ~/.asoundrc configuration. Note that the mixer_device is now required and must refer to the real device (see the slave.pcm value) and not the named device (ie dac ) that we created and are using for the card configuration value. For the final server configuration, we will use: audio { nickname = \"Computer\" type = \"alsa\" card=\"dac\" mixer=\"Analogue\" mixer_device=\"hw:1\" }","title":"ALSA"},{"location":"README_ALSA/#1-forked-daapd-and-alsa","text":"ALSA is one of the main output configuration options for local audio; when using ALSA you will typically let the system select the soundcard on your machine as the default device/sound card - a mixer associated with the ALSA device is used for volume control. However if your machine has multiple sound cards and your system chooses the wrong playback device, you will need to manually select the card and mixer to complete the forked daapd configuration. # example audio section for server audio { nickname = \"Computer\" type = \"alsa\" card = \"hw:1\" # defaults to 'default' mixer = \"Analogue\" # defaults to 'PCM' or 'Master' mixer_device = \"hw:1\" # defaults to same as 'card' value } To verify if the default sound device is correct for playback, we will use the aplay utility. # generate some audio if you don't have a wav file to hand $ sox -n -c 2 -r 44100 -b 16 -C 128 /tmp/sine441.wav synth 30 sin 500-100 fade h 0.2 30 0.2 $ aplay -Ddefault /tmp/sine441.wav If you can hear music played then you are good to use default for the server configuration. If you can not hear anything from the aplay firstly verify (using alsamixer ) that the sound card is not muted. If the card is not muted AND there is no sound you can try the options below to determine the card and mixer for configuring the server. The example below is how I determined the correct sound card and mixer values for a Raspberry Pi that has an additional DAC card (hat) mounted.","title":"1. forked-daapd and ALSA"},{"location":"README_ALSA/#11-determining-the-sound-cards-you-have-alsa-can-see","text":"Use aplay -l to list all the sound cards and their order as known to the system - you can have multiple card X, device Y entries; some cards can also have multiple playback devices such as the RPI's onboard soundcard which feeds both headphone (card 0, device 0) and HDMI (card 0, device 1). $ aplay -l **** List of PLAYBACK Hardware Devices **** card 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA] Subdevices: 6/7 Subdevice #0: subdevice #0 Subdevice #1: subdevice #1 Subdevice #2: subdevice #2 Subdevice #3: subdevice #3 Subdevice #4: subdevice #4 Subdevice #5: subdevice #5 Subdevice #6: subdevice #6 card 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958/HDMI] Subdevices: 1/1 Subdevice #0: subdevice #0 card 1: IQaudIODAC [IQaudIODAC], device 0: IQaudIO DAC HiFi pcm512x-hifi-0 [] Subdevices: 1/1 Subdevice #0: subdevice #0 On this machine we see the second sound card installed, an IQaudIODAC dac hat, and identified as card 1 device 0 . This is the playback device we want to be used by the server. In ALSA configuration terms card X, device Y is known as hw:X,Y which is the format used for the server configuration: hw:1,0 is the IQaudIODAC that we want to use - we verify audiable playback through that sound card using aplay -Dhw:1 /tmp/sine441.wav . If the card has only one device, we can simply refer to the sound card using hw:X so in this case where the IQaudIODAC only has one device, we can refer to this card as hw:1 or hw:1,0 . Use aplay -L to get more information about the PCM devices defined on the system. $ aplay -L null Discard all samples (playback) or generate zero samples (capture) default:CARD=ALSA bcm2835 ALSA, bcm2835 ALSA Default Audio Device sysdefault:CARD=ALSA bcm2835 ALSA, bcm2835 ALSA Default Audio Device dmix:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Direct sample mixing device dmix:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Direct sample mixing device dsnoop:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Direct sample snooping device dsnoop:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Direct sample snooping device hw:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Direct hardware device without any conversions hw:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Direct hardware device without any conversions plughw:CARD=ALSA,DEV=0 bcm2835 ALSA, bcm2835 ALSA Hardware device with all software conversions plughw:CARD=ALSA,DEV=1 bcm2835 ALSA, bcm2835 IEC958/HDMI Hardware device with all software conversions default:CARD=IQaudIODAC IQaudIODAC, Default Audio Device sysdefault:CARD=IQaudIODAC IQaudIODAC, Default Audio Device dmix:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Direct sample mixing device dsnoop:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Direct sample snooping device hw:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Direct hardware device without any conversions plughw:CARD=IQaudIODAC,DEV=0 IQaudIODAC, Hardware device with all software conversions For the server configuration, we will use: audio { nickname = \"Computer\" type = \"alsa\" card=\"hw:1\" # mixer=TBD # mixer_device=TBD }","title":"1.1 Determining the sound cards you have / ALSA can see"},{"location":"README_ALSA/#12-mixer-name","text":"Once you have the card number (determined from aplay -l ) we can inspect/confirm the name of the mixer (it may NOT be PCM as expected by the server). In this example, the card 1 is of interest and thus we use -c 1 with the following command: $ amixer -c 1 Simple mixer control 'DSP Program',0 Capabilities: enum Items: 'FIR interpolation with de-emphasis' 'Low latency IIR with de-emphasis' 'High attenuation with de-emphasis' 'Fixed process flow' 'Ringing-less low latency FIR' Item0: 'Ringing-less low latency FIR' Simple mixer control 'Analogue',0 Capabilities: pvolume Playback channels: Front Left - Front Right Limits: Playback 0 - 1 Mono: Front Left: Playback 1 [100%] [0.00dB] Front Right: Playback 1 [100%] [0.00dB] Simple mixer control 'Analogue Playback Boost',0 Capabilities: volume Playback channels: Front Left - Front Right Capture channels: Front Left - Front Right Limits: 0 - 1 Front Left: 0 [0%] [0.00dB] Front Right: 0 [0%] [0.00dB] ... This card has multiple controls but we want the first mixer listed with a pvolume capability - in this case that mixer value required for the server configuration is called Anaolgue . For the server configuration, we will use: audio { nickname = \"Computer\" type = \"alsa\" card=\"hw:1\" mixer=\"Analogue\" # mixer_device=TBD }","title":"1.2 Mixer name"},{"location":"README_ALSA/#13-mixer-device","text":"This is the name of the underlying physical device used for the mixer - it is typically the same value as the value of card in which case a value is not required by the server configuration. An example of when you want to change explicitly configure this is if you need to use a dmix device (see below).","title":"1.3 Mixer device"},{"location":"README_ALSA/#14-handling-devices-that-cannot-concurrently-play-multiple-audio-streams","text":"Some devices such as various RPI DAC boards (IQaudio DAC, Allo Boss DAC...) can not have multiple streams openned at the same time/cannot play multiple sound files at the same time: this results in Device or resource busy errors. You can confirm if your sound card has this problem by using the example below once have determined the names/cards information as above. Using our hw:1 device we try: # generate some audio $ sox -n -c 2 -r 44100 -b 16 -C 128 /tmp/sine441.wav synth 30 sin 500-100 fade h 0.2 30 0.2 # attempt to play 2 files at the same time $ aplay -v -Dhw:1 /tmp/sine441.wav & Playing WAVE '/tmp/sine441.wav' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo Hardware PCM card 1 'IQaudIODAC' device 0 subdevice 0 Its setup is: stream : PLAYBACK access : RW_INTERLEAVED format : S16_LE subformat : STD channels : 2 rate : 44100 exact rate : 44100 (44100/1) msbits : 16 buffer_size : 22052 period_size : 5513 period_time : 125011 tstamp_mode : NONE tstamp_type : MONOTONIC period_step : 1 avail_min : 5513 period_event : 0 start_threshold : 22052 stop_threshold : 22052 silence_threshold: 0 silence_size : 0 boundary : 1445199872 appl_ptr : 0 hw_ptr : 0 $ aplay -v -Dhw:1 /tmp/sine441.wav aplay: main:788: audio open error: Device or resource busy In this instance this device can not open multiple streams - forked-daapd can handle this situation transparently with some audio being truncated from the end of the current file as the server prepares to play the following track. If this handling is causing you problems you may wish to use ALSA's dmix functionally which provides a software mixing module. We will need to define a dmix component and configure the server to use that as it's sound card. The downside to the dmix approach will be the need to fix a samplerate (48000 being the default) for this software mixing module meaning any files that have a mismatched samplerate will be resampled.","title":"1.4 Handling Devices that cannot concurrently play multiple audio streams"},{"location":"README_ALSA/#15-alsa-dmix-configurationsetup","text":"A dmix device can be defined in /etc/asound.conf or ~/.asoundrc . We will need to know the underlying physical soundcard to be used: in our examples above, hw:1,0 / card 1, device 0 representing our IQaudIODAC as per output of aplay -l . We also take the buffer_size and period_size from the output of playing a sound file via aplay -v . # use 'dac' as the name of the device: \"aplay -Ddac ....\" pcm.!dac { type plug slave.pcm \"dmixer\" hint.description \"IQAudio DAC s/w dmix enabled device\" } pcm.dmixer { type dmix ipc_key 1024 # need to be uniq value ipc_key_add_uid false # multiple concurrent different users ipc_perm 0666 # multi-user sharing permissions slave { pcm \"hw:1,0\" # points at the underlying device - could also simply be hw:1 period_time 0 period_size 4096 # from the output of aplay -v buffer_size 22052 # from the output of aplay -v rate 44100 # locked in sample rate for resampling on dmix device } hint.description \"IQAudio DAC s/w dmix device\" } ctl.dmixer { type hw card 1 # underlying device device 0 } Running aplay -L we will see our newly defined devices dac and dmixer $ aplay -L null Discard all samples (playback) or generate zero samples (capture) dac IQAudio DAC s/w dmix enabled device dmixer IQAudio DAC s/w dmix device default:CARD=ALSA bcm2835 ALSA, bcm2835 ALSA Default Audio Device ... At this point we are able to rerun the concurrent aplay commands (adding -Ddac to specify the playback device to use) to verify ALSA configuration. If there is only one card on the machine you may use pcm.!default instead of pcm.!dac - there is less configuration to be done later since many ALSA applications will use the device called default by default. Furthermore on RPI you can explicitly disable the onboard sound card to leave us with only the IQaudIODAC board enabled (won't affect HDMI sound output) by commenting out #dtparam=audio=on in /boot/config.txt and rebooting.","title":"1.5 ALSA dmix configuration/setup"},{"location":"README_ALSA/#151-forked-daapd-config-with-dmix","text":"We will use the newly defined card named dac which uses the underlying hw:1 device as per /etc/asound.conf or ~/.asoundrc configuration. Note that the mixer_device is now required and must refer to the real device (see the slave.pcm value) and not the named device (ie dac ) that we created and are using for the card configuration value. For the final server configuration, we will use: audio { nickname = \"Computer\" type = \"alsa\" card=\"dac\" mixer=\"Analogue\" mixer_device=\"hw:1\" }","title":"1.5.1 forked-daapd config with dmix"},{"location":"README_JSON_API/","text":"1. forked-daapd API Endpoint Reference Available API endpoints: Player : control playback, volume, shuffle/repeat modes Outputs / Speakers : list available outputs and enable/disable outputs Queue : list, add or modify the current queue Library : list playlists, artists, albums and tracks from your library or trigger library rescan Search : search for playlists, artists, albums and tracks Server info : get server information Settings : list and change settings for the player web interface Push notifications : receive push notifications JSON-Object model: Queue item Playlist Artist Album Track 1.1 Player Method Endpoint Description GET /api/player Get player status PUT /api/player/play, /api/player/pause, /api/player/stop, /api/player/toggle Start, pause or stop playback PUT /api/player/next, /api/player/previous Skip forward or backward PUT /api/player/shuffle Set shuffle mode PUT /api/player/consume Set consume mode PUT /api/player/repeat Set repeat mode PUT /api/player/volume Set master volume or volume for a specific output PUT /api/player/seek Seek to a position in the currently playing track 1.1.1 Get player status Endpoint GET /api/player Response Key Type Value state string play , pause or stop repeat string off , all or single consume boolean true if consume mode is enabled shuffle boolean true if shuffle mode is enabled volume integer Master volume in percent (0 - 100) item_id integer The current playing queue item id item_length_ms integer Total length in milliseconds of the current queue item item_progress_ms integer Progress into the current queue item in milliseconds Example curl -X GET \"http://localhost:3689/api/player\" { \"state\": \"pause\", \"repeat\": \"off\", \"consume\": false, \"shuffle\": false, \"volume\": 50, \"item_id\": 269, \"item_length_ms\": 278093, \"item_progress_ms\": 3674 } 1.1.2 Control playback Start or resume, pause, stop playback. Endpoint PUT /api/player/play PUT /api/player/pause PUT /api/player/stop PUT /api/player/toggle Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/play\" curl -X PUT \"http://localhost:3689/api/player/pause\" curl -X PUT \"http://localhost:3689/api/player/stop\" curl -X PUT \"http://localhost:3689/api/player/toggle\" 1.1.3 Skip tracks Skip forward or backward Endpoint PUT /api/player/next PUT /api/player/previous Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/next\" curl -X PUT \"http://localhost:3689/api/player/previous\" 1.1.4 Set shuffle mode Enable or disable shuffle mode Endpoint PUT /api/player/shuffle Query parameters Parameter Value state The new shuffle state, should be either true or false Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/shuffle?state=true\" 1.1.5 Set consume mode Enable or disable consume mode Endpoint PUT /api/player/consume Query parameters Parameter Value state The new consume state, should be either true or false Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/consume?state=true\" 1.1.6 Set repeat mode Change repeat mode Endpoint PUT /api/player/repeat Query parameters Parameter Value state The new repeat mode, should be either off , all or single Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/repeat?state=all\" 1.1.7 Set volume Change master volume or volume of a specific output. Endpoint PUT /api/player/volume Query parameters Parameter Value volume The new volume (0 - 100) step The increase or decrease volume by the given amount (-100 - 100) output_id (Optional) If an output id is given, only the volume of this output will be changed. If parameter is omited, the master volume will be changed. Either volume or step must be present as query parameter Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/volume?volume=50\" curl -X PUT \"http://localhost:3689/api/player/volume?step=-5\" curl -X PUT \"http://localhost:3689/api/player/volume?volume=50&output_id=0\" 1.1.8 Seek Seek to a position in the currently playing track. Endpoint PUT /api/player/seek Query parameters Parameter Value position_ms The new position in milliseconds to seek to seek_ms A relative amount of milliseconds to seek to Response On success returns the HTTP 204 No Content success status response code. Example Seek to position: curl -X PUT \"http://localhost:3689/api/player/seek?position_ms=2000\" Relative seeking (skip 30 seconds backwards): curl -X PUT \"http://localhost:3689/api/player/seek?seek_ms=-30000\" 1.2 Outputs / Speakers Method Endpoint Description GET /api/outputs Get a list of available outputs PUT /api/outputs/set Set enabled outputs GET /api/outputs/{id} Get an output PUT /api/outputs/{id} Change an output (enable/disable or volume) PUT /api/outputs/{id}/toggle Enable or disable an output, depending on the current state 1.2.1 Get a list of available outputs Endpoint GET /api/outputs Response Key Type Value outputs array Array of output objects output object Key Type Value id string Output id name string Output name type string Type of the output: AirPlay , Chromecast , ALSA , Pulseaudio , fifo selected boolean true if output is enabled has_password boolean true if output is password protected requires_auth boolean true if output requires authentication needs_auth_key boolean true if output requires an authorization key (device verification) volume integer Volume in percent (0 - 100) Example curl -X GET \"http://localhost:3689/api/outputs\" { \"outputs\": [ { \"id\": \"123456789012345\", \"name\": \"kitchen\", \"type\": \"AirPlay\", \"selected\": true, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 0 }, { \"id\": \"0\", \"name\": \"Computer\", \"type\": \"ALSA\", \"selected\": true, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 19 }, { \"id\": \"100\", \"name\": \"daapd-fifo\", \"type\": \"fifo\", \"selected\": false, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 0 } ] } 1.2.2 Set enabled outputs Set the enabled outputs by passing an array of output ids. forked-daapd enables all outputs with the given ids and disables the remaining outputs. Endpoint PUT /api/outputs/set Body parameters Parameter Type Value outputs array Array of output ids Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/outputs/set\" --data \"{\\\"outputs\\\":[\\\"198018693182577\\\",\\\"0\\\"]}\" 1.2.3 Get an output Get an output Endpoint GET /api/outputs/{id} Path parameters Parameter Value id Output id Response On success returns the HTTP 200 OK success status response code. With the response body holding the output object . Example curl -X GET \"http://localhost:3689/api/outputs/0\" { \"id\": \"0\", \"name\": \"Computer\", \"type\": \"ALSA\", \"selected\": true, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 3 } 1.2.4 Change an output Enable or disable an output and change its volume. Endpoint PUT /api/outputs/{id} Path parameters Parameter Value id Output id Body parameters Parameter Type Value selected boolean (Optional) true to enable and false to disable the output volume integer (Optional) Volume in percent (0 - 100) Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/outputs/0\" --data \"{\\\"selected\\\":true, \\\"volume\\\": 50}\" 1.2.5 Toggle an output Enable or disable an output, depending on its current state Endpoint PUT /api/outputs/{id}/toggle Path parameters Parameter Value id Output id Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/outputs/0/toggle\" 1.3 Queue Method Endpoint Description GET /api/queue Get a list of queue items PUT /api/queue/clear Remove all items from the queue POST /api/queue/items/add Add items to the queue PUT /api/queue/items/{id} Move a queue item in the queue DELETE /api/queue/items/{id} Remove a queue item form the queue 1.3.1 List queue items Lists the items in the current queue Endpoint GET /api/queue Query parameters Parameter Value id (Optional) If a queue item id is given, only the item with the id will be returend. start (Optional) If a start and an end position is given, only the items from start (included) to end (excluded) will be returned. If only a start position is given, only the item at this position will be returned. end (Optional) See start parameter Response Key Type Value version integer Version number of the current queue count integer Number of items in the current queue items array Array of queue item objects Example curl -X GET \"http://localhost:3689/api/queue\" { \"version\": 833, \"count\": 20, \"items\": [ { \"id\": 12122, \"position\": 0, \"track_id\": 10749, \"title\": \"Angels\", \"artist\": \"The xx\", \"artist_sort\": \"xx, The\", \"album\": \"Coexist\", \"album_sort\": \"Coexist\", \"albumartist\": \"The xx\", \"albumartist_sort\": \"xx, The\", \"genre\": \"Indie Rock\", \"year\": 2012, \"track_number\": 1, \"disc_number\": 1, \"length_ms\": 171735, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/The xx/Coexist/01 Angels.mp3\", \"uri\": \"library:track:10749\" }, ... ] } 1.3.2 Clearing the queue Remove all items form the current queue Endpoint PUT /api/queue/clear Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/queue/clear\" 1.3.3 Adding items to the queue Add tracks, playlists artists or albums to the current queue Endpoint POST /api/queue/items/add Query parameters Parameter Value uris Comma seperated list of resource identifiers ( track , playlist , artist or album object uri ) expression A smart playlist query expression identifying the tracks that will be added to the queue. position (Optional) If a position is given, new items are inserted starting from this position into the queue. playback (Optional) If the playback parameter is set to start , playback will be started after adding the new items. playback_from_position (Optional) If the playback parameter is set to start , playback will be started with the queue item at the position given in playback_from_position . clear (Optional) If the clear parameter is set to true , the queue will be cleared before adding the new items. shuffle (Optional) If the shuffle parameter is set to true , the shuffle mode is activated. If it is set to something else, the shuffle mode is deactivated. To leave the shuffle mode untouched the parameter should be ommited. Either the uris or the expression parameter must be set. If both are set the uris parameter takes presedence and the expression parameter will be ignored. Response On success returns the HTTP 200 OK success status response code. Key Type Value count integer number of tracks added to the queue Example Add new items by uri: curl -X POST \"http://localhost:3689/api/queue/items/add?uris=library:playlist:68,library:artist:2932599850102967727\" { \"count\": 42 } Add new items by query language: curl -X POST \"http://localhost:3689/api/queue/items/add?expression=media_kind+is+music\" { \"count\": 42 } 1.3.4 Moving a queue item Move a queue item in the current queue Endpoint PUT /api/queue/items/{id} Path parameters Parameter Value id Queue item id Query parameters Parameter Value new_position The new position for the queue item in the current queue. Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/queue/items/3?new_position=0\" 1.3.5 Removing a queue item Remove a queue item from the current queue Endpoint DELETE /api/queue/items/{id} Path parameters Parameter Value id Queue item id Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/queue/items/2\" 1.4 Library Method Endpoint Description GET /api/library Get library information GET /api/library/playlists Get a list of playlists GET /api/library/playlists/{id} Get a playlist GET /api/library/playlists/{id}/tracks Get list of tracks for a playlist GET /api/library/artists Get a list of artists GET /api/library/artists/{id} Get an artist GET /api/library/artists/{id}/albums Get list of albums for an artist GET /api/library/albums Get a list of albums GET /api/library/albums/{id} Get an album GET /api/library/albums/{id}/tracks Get list of tracks for an album GET /api/library/tracks/{id} Get a track PUT /api/library/tracks/{id} Update a tracks properties (rating, play_count) GET /api/library/genres Get list of genres GET /api/library/count Get count of tracks, artists and albums GET /api/library/files Get list of directories in the local library PUT /api/update Trigger a library rescan PUT /api/rescan Trigger a library metadata rescan 1.4.1 Library information List some library stats Endpoint GET /api/library Response Key Type Value songs integer Array of playlist objects db_playtime integer Total playtime of all songs in the library artists integer Number of album artists in the library albums integer Number of albums in the library started_at string Server startup time (timestamp in ISO 8601 format) updated_at string Last library update (timestamp in ISO 8601 format) updating boolean true if library rescan is in progress Example curl -X GET \"http://localhost:3689/api/library\" { \"songs\": 217, \"db_playtime\": 66811, \"artists\": 9, \"albums\": 19, \"started_at\": \"2018-11-19T19:06:08Z\", \"updated_at\": \"2018-11-19T19:06:16Z\", \"updating\": false } 1.4.2 List playlists Lists the playlists in your library Endpoint GET /api/library/playlists Query parameters Parameter Value offset (Optional) Offset of the first playlist to return limit (Optional) Maximum number of playlists to return Response Key Type Value items array Array of playlist objects total integer Total number of playlists in the library offset integer Requested offset of the first playlist limit integer Requested maximum number of playlists Example curl -X GET \"http://localhost:3689/api/library/playlists\" { \"items\": [ { \"id\": 1, \"name\": \"radio\", \"path\": \"/music/srv/radio.m3u\", \"smart_playlist\": false, \"uri\": \"library:playlist:1\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 } 1.4.3 Get a playlist Get a specific playlists in your library Endpoint GET /api/library/playlists/{id} Path parameters Parameter Value id Playlist id Response On success returns the HTTP 200 OK success status response code. With the response body holding the playlist object . Example curl -X GET \"http://localhost:3689/api/library/playlists/1\" { \"id\": 1, \"name\": \"radio\", \"path\": \"/music/srv/radio.m3u\", \"smart_playlist\": false, \"uri\": \"library:playlist:1\" } 1.4.4 List playlist tracks Lists the tracks in a playlists Endpoint GET /api/library/playlists/{id}/tracks Path parameters Parameter Value id Playlist id Query parameters Parameter Value offset (Optional) Offset of the first track to return limit (Optional) Maximum number of tracks to return Response Key Type Value items array Array of track objects total integer Total number of tracks in the playlist offset integer Requested offset of the first track limit integer Requested maximum number of tracks Example curl -X GET \"http://localhost:3689/api/library/playlists/1/tracks\" { \"items\": [ { \"id\": 10766, \"title\": \"Solange wir tanzen\", \"artist\": \"Heinrich\", \"artist_sort\": \"Heinrich\", \"album\": \"Solange wir tanzen\", \"album_sort\": \"Solange wir tanzen\", \"albumartist\": \"Heinrich\", \"albumartist_sort\": \"Heinrich\", \"genre\": \"Electronica\", \"year\": 2014, \"track_number\": 1, \"disc_number\": 1, \"length_ms\": 223085, \"play_count\": 2, \"skip_count\": 1, \"time_played\": \"2018-02-23T10:31:20Z\", \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Heinrich/Solange wir tanzen/01 Solange wir tanzen.mp3\", \"uri\": \"library:track:10766\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 } 1.4.5 List artists Lists the artists in your library Endpoint GET /api/library/artists Query parameters Parameter Value offset (Optional) Offset of the first artist to return limit (Optional) Maximum number of artists to return Response Key Type Value items array Array of artist objects total integer Total number of artists in the library offset integer Requested offset of the first artist limit integer Requested maximum number of artists Example curl -X GET \"http://localhost:3689/api/library/artists\" { \"items\": [ { \"id\": \"3815427709949443149\", \"name\": \"ABAY\", \"name_sort\": \"ABAY\", \"album_count\": 1, \"track_count\": 10, \"length_ms\": 2951554, \"uri\": \"library:artist:3815427709949443149\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 } 1.4.6 Get an artist Get a specific artist in your library Endpoint GET /api/library/artists/{id} Path parameters Parameter Value id Artist id Response On success returns the HTTP 200 OK success status response code. With the response body holding the artist object . Example curl -X GET \"http://localhost:3689/api/library/artists/3815427709949443149\" { \"id\": \"3815427709949443149\", \"name\": \"ABAY\", \"name_sort\": \"ABAY\", \"album_count\": 1, \"track_count\": 10, \"length_ms\": 2951554, \"uri\": \"library:artist:3815427709949443149\" } 1.4.7 List artist albums Lists the albums of an artist Endpoint GET /api/library/artists/{id}/albums Path parameters Parameter Value id Artist id Query parameters Parameter Value offset (Optional) Offset of the first album to return limit (Optional) Maximum number of albums to return Response Key Type Value items array Array of album objects total integer Total number of albums of this artist offset integer Requested offset of the first album limit integer Requested maximum number of albums Example curl -X GET \"http://localhost:3689/api/library/artists/32561671101664759/albums\" { \"items\": [ { \"id\": \"8009851123233197743\", \"name\": \"Add Violence\", \"name_sort\": \"Add Violence\", \"artist\": \"Nine Inch Nails\", \"artist_id\": \"32561671101664759\", \"track_count\": 5, \"length_ms\": 1634961, \"uri\": \"library:album:8009851123233197743\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 } 1.4.8 List albums Lists the albums in your library Endpoint GET /api/library/albums Query parameters Parameter Value offset (Optional) Offset of the first album to return limit (Optional) Maximum number of albums to return Response Key Type Value items array Array of album objects total integer Total number of albums in the library offset integer Requested offset of the first albums limit integer Requested maximum number of albums Example curl -X GET \"http://localhost:3689/api/library/albums\" { \"items\": [ { \"id\": \"8009851123233197743\", \"name\": \"Add Violence\", \"name_sort\": \"Add Violence\", \"artist\": \"Nine Inch Nails\", \"artist_id\": \"32561671101664759\", \"track_count\": 5, \"length_ms\": 1634961, \"uri\": \"library:album:8009851123233197743\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 } 1.4.9 Get an album Get a specific album in your library Endpoint GET /api/library/albums/{id} Path parameters Parameter Value id Album id Response On success returns the HTTP 200 OK success status response code. With the response body holding the album object . Example curl -X GET \"http://localhost:3689/api/library/albums/8009851123233197743\" { \"id\": \"8009851123233197743\", \"name\": \"Add Violence\", \"name_sort\": \"Add Violence\", \"artist\": \"Nine Inch Nails\", \"artist_id\": \"32561671101664759\", \"track_count\": 5, \"length_ms\": 1634961, \"uri\": \"library:album:8009851123233197743\" } 1.4.10 List album tracks Lists the tracks in an album Endpoint GET /api/library/albums/{id}/tracks Path parameters Parameter Value id Album id Query parameters Parameter Value offset (Optional) Offset of the first track to return limit (Optional) Maximum number of tracks to return Response Key Type Value items array Array of track objects total integer Total number of tracks offset integer Requested offset of the first track limit integer Requested maximum number of tracks Example curl -X GET \"http://localhost:3689/api/library/albums/1/tracks\" { \"items\": [ { \"id\": 10766, \"title\": \"Solange wir tanzen\", \"artist\": \"Heinrich\", \"artist_sort\": \"Heinrich\", \"album\": \"Solange wir tanzen\", \"album_sort\": \"Solange wir tanzen\", \"albumartist\": \"Heinrich\", \"albumartist_sort\": \"Heinrich\", \"genre\": \"Electronica\", \"year\": 2014, \"track_number\": 1, \"disc_number\": 1, \"length_ms\": 223085, \"play_count\": 2, \"last_time_played\": \"2018-02-23T10:31:20Z\", \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Heinrich/Solange wir tanzen/01 Solange wir tanzen.mp3\", \"uri\": \"library:track:10766\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 } 1.4.11 Get a track Get a specific track in your library Endpoint GET /api/library/tracks/{id} Path parameters Parameter Value id Track id Response On success returns the HTTP 200 OK success status response code. With the response body holding the track object . Example curl -X GET \"http://localhost:3689/api/library/track/1\" { \"id\": 1, \"title\": \"Pardon Me\", \"title_sort\": \"Pardon Me\", \"artist\": \"Incubus\", \"artist_sort\": \"Incubus\", \"album\": \"Make Yourself\", \"album_sort\": \"Make Yourself\", \"album_id\": \"6683985628074308431\", \"album_artist\": \"Incubus\", \"album_artist_sort\": \"Incubus\", \"album_artist_id\": \"4833612337650426236\", \"composer\": \"Alex Katunich/Brandon Boyd/Chris Kilmore/Jose Antonio Pasillas II/Mike Einziger\", \"genre\": \"Alternative Rock\", \"year\": 2001, \"track_number\": 12, \"disc_number\": 1, \"length_ms\": 223170, \"rating\": 0, \"play_count\": 0, \"skip_count\": 0, \"time_added\": \"2019-01-20T11:58:29Z\", \"date_released\": \"2001-05-27\", \"seek_ms\": 0, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Incubus/Make Yourself/12 Pardon Me.mp3\", \"uri\": \"library:track:1\", \"artwork_url\": \"/artwork/item/1\" } 1.4.12 Update track properties Change properties of a specific track (supported properties are \"rating\" and \"play_count\") Endpoint PUT /api/library/tracks/{id} Path parameters Parameter Value id Track id Query parameters Parameter Value rating The new rating (0 - 100) play_count Either increment or reset . increment will increment play_count and update time_played , reset will set play_count and skip_count to zero and delete time_played and time_skipped Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/library/tracks/1?rating=100\" curl -X PUT \"http://localhost:3689/api/library/tracks/1?play_count=increment\" 1.4.13 List genres Get list of genres Endpoint GET /api/library/genres Response Key Type Value items array Array of genre objects total integer Total number of genres in the library offset integer Requested offset of the first genre limit integer Requested maximum number of genres Example curl -X GET \"http://localhost:3689/api/library/genres\" { \"items\": [ { \"name\": \"Classical\" }, { \"name\": \"Drum & Bass\" }, { \"name\": \"Pop\" }, { \"name\": \"Rock/Pop\" }, { \"name\": \"'90s Alternative\" } ], \"total\": 5, \"offset\": 0, \"limit\": -1 } 1.4.14 List albums for genre Lists the albums in a genre Endpoint GET api/search?type=albums&expression=genre+is+\\\"{genre name}\\\"\" Query parameters Parameter Value genre genre name (uri encoded and html esc seq for chars: '/&) offset (Optional) Offset of the first album to return limit (Optional) Maximum number of albums to return Response Key Type Value items array Array of album objects total integer Total number of albums in the library offset integer Requested offset of the first albums limit integer Requested maximum number of albums Example curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"Pop\\\"\" curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"Rock%2FPop\\\"\" # Rock/Pop curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"Drum%20%26%20Bass\\\"\" # Drum & Bass curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"%2790s%20Alternative\\\"\" # '90 Alternative { \"albums\": { \"items\": [ { \"id\": \"320189328729146437\", \"name\": \"Best Ever\", \"name_sort\": \"Best Ever\", \"artist\": \"ABC\", \"artist_id\": \"8760559201889050080\", \"track_count\": 1, \"length_ms\": 3631, \"uri\": \"library:album:320189328729146437\" }, { \"id\": \"7964595866631625723\", \"name\": \"Greatest Hits\", \"name_sort\": \"Greatest Hits\", \"artist\": \"Marvin Gaye\", \"artist_id\": \"5261930703203735930\", \"track_count\": 2, \"length_ms\": 7262, \"uri\": \"library:album:7964595866631625723\" }, { \"id\": \"3844610748145176456\", \"name\": \"The Very Best of Etta\", \"name_sort\": \"Very Best of Etta\", \"artist\": \"Etta James\", \"artist_id\": \"2627182178555864595\", \"track_count\": 1, \"length_ms\": 177926, \"uri\": \"library:album:3844610748145176456\" } ], \"total\": 3, \"offset\": 0, \"limit\": -1 } } 1.4.15 Get count of tracks, artists and albums Get information about the number of tracks, artists and albums and the total playtime Endpoint GET /api/library/count Query parameters Parameter Value expression (Optional) The smart playlist query expression, if this parameter is omitted returns the information for the whole library Response Key Type Value tracks integer Number of tracks matching the expression artists integer Number of artists matching the expression albums integer Number of albums matching the expression db_playtime integer Total playtime in milliseconds of all tracks matching the expression Example curl -X GET \"http://localhost:3689/api/library/count?expression=data_kind+is+file\" { \"tracks\": 6811, \"artists\": 355, \"albums\": 646, \"db_playtime\": 1590767 } 1.4.16 List local directories List the local directories and the directory contents (tracks and playlists) Endpoint GET /api/library/files Query parameters Parameter Value directory (Optional) A path to a directory in your local library. Response Key Type Value directories array Array of directory objects containing the sub directories tracks object paging object containing track objects that matches the directory playlists object paging object containing playlist objects that matches the directory Example curl -X GET \"http://localhost:3689/api/library/files?directory=/music/srv\" { \"directories\": [ { \"path\": \"/music/srv/Audiobooks\" }, { \"path\": \"/music/srv/Music\" }, { \"path\": \"/music/srv/Playlists\" }, { \"path\": \"/music/srv/Podcasts\" } ], \"tracks\": { \"items\": [ { \"id\": 1, \"title\": \"input.pipe\", \"artist\": \"Unknown artist\", \"artist_sort\": \"Unknown artist\", \"album\": \"Unknown album\", \"album_sort\": \"Unknown album\", \"album_id\": \"4201163758598356043\", \"album_artist\": \"Unknown artist\", \"album_artist_sort\": \"Unknown artist\", \"album_artist_id\": \"4187901437947843388\", \"genre\": \"Unknown genre\", \"year\": 0, \"track_number\": 0, \"disc_number\": 0, \"length_ms\": 0, \"play_count\": 0, \"skip_count\": 0, \"time_added\": \"2018-11-24T08:41:35Z\", \"seek_ms\": 0, \"media_kind\": \"music\", \"data_kind\": \"pipe\", \"path\": \"/music/srv/input.pipe\", \"uri\": \"library:track:1\", \"artwork_url\": \"/artwork/item/1\" } ], \"total\": 1, \"offset\": 0, \"limit\": -1 }, \"playlists\": { \"items\": [ { \"id\": 8, \"name\": \"radio\", \"path\": \"/music/srv/radio.m3u\", \"smart_playlist\": true, \"uri\": \"library:playlist:8\" } ], \"total\": 1, \"offset\": 0, \"limit\": -1 } } 1.4.17 Trigger rescan Trigger a library rescan Endpoint PUT /api/update Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/update\" { \"songs\": 217, \"db_playtime\": 66811, \"artists\": 9, \"albums\": 19, \"started_at\": \"2018-11-19T19:06:08Z\", \"updated_at\": \"2018-11-19T19:06:16Z\", \"updating\": false } 1.4.18 Trigger metadata rescan Trigger a library metadata rescan even if files have not been updated. Maintenence method. Endpoint PUT /api/rescan Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/rescan\" 1.5 Search Method Endpoint Description GET /api/search Search for playlists, artists, albums, tracks,genres by a simple search term GET /api/search Search by complex query expression 1.5.1 Search by search term Search for playlists, artists, albums, tracks, genres that include the given query in their title (case insensitive matching). Endpoint GET /api/search Query parameters Parameter Value query The search keyword type Comma separated list of the result types ( playlist , artist , album , track , genre ) media_kind (Optional) Filter results by media kind ( music , movie , podcast , audiobook , musicvideo , tvshow ). Filter only applies to artist, album and track result types. offset (Optional) Offset of the first item to return for each type limit (Optional) Maximum number of items to return for each type Response Key Type Value tracks object paging object containing track objects that matches the query artists object paging object containing artist objects that matches the query albums object paging object containing album objects that matches the query playlists object paging object containing playlist objects that matches the query Example Search for all tracks, artists, albums and playlists that contain \"the\" in their title and return the first two results for each type: curl -X GET \"http://localhost:3689/api/search?type=tracks,artists,albums,playlists&query=the&offset=0&limit=2\" { \"tracks\": { \"items\": [ { \"id\": 35, \"title\": \"Another Love\", \"artist\": \"Tom Odell\", \"artist_sort\": \"Tom Odell\", \"album\": \"Es is was es is\", \"album_sort\": \"Es is was es is\", \"album_id\": \"6494853621007413058\", \"album_artist\": \"Various artists\", \"album_artist_sort\": \"Various artists\", \"album_artist_id\": \"8395563705718003786\", \"genre\": \"Singer/Songwriter\", \"year\": 2013, \"track_number\": 7, \"disc_number\": 1, \"length_ms\": 251030, \"play_count\": 0, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Compilations/Es is was es is/07 Another Love.m4a\", \"uri\": \"library:track:35\" }, { \"id\": 215, \"title\": \"Away From the Sun\", \"artist\": \"3 Doors Down\", \"artist_sort\": \"3 Doors Down\", \"album\": \"Away From the Sun\", \"album_sort\": \"Away From the Sun\", \"album_id\": \"8264078270267374619\", \"album_artist\": \"3 Doors Down\", \"album_artist_sort\": \"3 Doors Down\", \"album_artist_id\": \"5030128490104968038\", \"genre\": \"Rock\", \"year\": 2002, \"track_number\": 2, \"disc_number\": 1, \"length_ms\": 233278, \"play_count\": 0, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Away From the Sun/02 Away From the Sun.mp3\", \"uri\": \"library:track:215\" } ], \"total\": 14, \"offset\": 0, \"limit\": 2 }, \"artists\": { \"items\": [ { \"id\": \"8737690491750445895\", \"name\": \"The xx\", \"name_sort\": \"xx, The\", \"album_count\": 2, \"track_count\": 25, \"length_ms\": 5229196, \"uri\": \"library:artist:8737690491750445895\" } ], \"total\": 1, \"offset\": 0, \"limit\": 2 }, \"albums\": { \"items\": [ { \"id\": \"8264078270267374619\", \"name\": \"Away From the Sun\", \"name_sort\": \"Away From the Sun\", \"artist\": \"3 Doors Down\", \"artist_id\": \"5030128490104968038\", \"track_count\": 12, \"length_ms\": 2818174, \"uri\": \"library:album:8264078270267374619\" }, { \"id\": \"6835720495312674468\", \"name\": \"The Better Life\", \"name_sort\": \"Better Life\", \"artist\": \"3 Doors Down\", \"artist_id\": \"5030128490104968038\", \"track_count\": 11, \"length_ms\": 2393332, \"uri\": \"library:album:6835720495312674468\" } ], \"total\": 3, \"offset\": 0, \"limit\": 2 }, \"playlists\": { \"items\": [], \"total\": 0, \"offset\": 0, \"limit\": 2 } } 1.5.2 Search by query language Search for artists, albums, tracks by a smart playlist query expression (see README_SMARTPL.md for the expression syntax). Endpoint GET /api/search Query parameters Parameter Value expression The smart playlist query expression type Comma separated list of the result types ( artist , album , track offset (Optional) Offset of the first item to return for each type limit (Optional) Maximum number of items to return for each type Response Key Type Value tracks object paging object containing track objects that matches the query artists object paging object containing artist objects that matches the query albums object paging object containing album objects that matches the query Example Search for music tracks ordered descending by the time added to the library and limit result to 2 items: curl -X GET \"http://localhost:3689/api/search?type=tracks&expression=media_kind+is+music+order+by+time_added+desc&offset=0&limit=2\" 1.6 Server info Method Endpoint Description GET /api/config Get configuration information 1.6.1 Config Endpoint GET /api/config Response Key Type Value version string forked-daapd server version websocket_port integer Port number for the websocket (or 0 if websocket is disabled) buildoptions array Array of strings indicating which features are supported by the forked-daapd server Example curl -X GET \"http://localhost:3689/api/config\" { \"websocket_port\": 3688, \"version\": \"25.0\", \"buildoptions\": [ \"ffmpeg\", \"iTunes XML\", \"Spotify\", \"LastFM\", \"MPD\", \"Device verification\", \"Websockets\", \"ALSA\" ] } 1.7 Settings Method Endpoint Description GET /api/settings Get all available categories GET /api/settings/{category-name} Get all available options for a category GET /api/settings/{category-name}/{option-name} Get a single setting option PUT /api/settings/{category-name}/{option-name} Change the value of a setting option 1.7.1 List categories List all settings categories with their options Endpoint GET /api/settings Response Key Type Value categories array Array of settings category objects Example curl -X GET \"http://localhost:3689/api/settings\" { \"categories\": [ { \"name\": \"webinterface\", \"options\": [ { \"name\": \"show_composer_now_playing\", \"type\": 1, \"value\": true }, { \"name\": \"show_composer_for_genre\", \"type\": 2, \"value\": \"classical\" } ] } ] } 1.7.2 Get a category Get a settings category with their options Endpoint GET /api/settings/{category-name} Response Returns a settings category object Example curl -X GET \"http://localhost:3689/api/settings/webinterface\" { \"name\": \"webinterface\", \"options\": [ { \"name\": \"show_composer_now_playing\", \"type\": 1, \"value\": true }, { \"name\": \"show_composer_for_genre\", \"type\": 2, \"value\": \"classical\" } ] } 1.7.3 Get a option Get a single settings option Endpoint GET /api/settings/{category-name}/{option-name} Response Returns a settings option object Example curl -X GET \"http://localhost:3689/api/settings/webinterface/show_composer_now_playing\" { \"name\": \"show_composer_now_playing\", \"type\": 1, \"value\": true } 1.7.4 Change a option value Get a single settings option Endpoint PUT /api/settings/{category-name}/{option-name} Request Key Type Value name string Option name value (integer / boolean / string) New option value Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/settings/webinterface/show_composer_now_playing\" --data \"{\\\"name\\\":\\\"show_composer_now_playing\\\",\\\"value\\\":true}\" 1.8 Push notifications If forked-daapd was built with websocket support, forked-daapd exposes a websocket at localhost:3688 to inform clients of changes (e. g. player state or library updates). The port depends on the forked-daapd configuration and can be read using the /api/config endpoint. After connecting to the websocket, the client should send a message containing the event types it is interested in. After that forked-daapd will send a message each time one of the events occurred. Message Key Type Value notify array Array of event types Event types Type Description update Library update started or finished database Library database changed (new/modified/deleted tracks) outputs An output was enabled or disabled player Player state changes options Playback option changes (shuffle, repeat, consume mode) volume Volume changes queue Queue changes Example curl --include \\ --no-buffer \\ --header \"Connection: Upgrade\" \\ --header \"Upgrade: websocket\" \\ --header \"Host: localhost:3688\" \\ --header \"Origin: http://localhost:3688\" \\ --header \"Sec-WebSocket-Key: SGVsbG8sIHdvcmxkIQ==\" \\ --header \"Sec-WebSocket-Version: 13\" \\ --header \"Sec-WebSocket-Protocol: notify\" \\ http://localhost:3688/ \\ --data \"{ \\\"notify\\\": [ \\\"player\\\" ] }\" { \"notify\": [ \"player\" ] } 1.9 Object model 1.9.1 queue item object Key Type Value id string Item id position integer Position in the queue (starting with zero) track_id string Track id title string Title artist string Track artist name artist_sort string Track artist sort name album string Album name album_sort string Album sort name album_id string Album id album_artist string Album artist name album_artist_sort string Album artist sort name album_artist_id string Album artist id composer string Composer (optional) genre string Genre year integer Release year track_number integer Track number disc_number integer Disc number length_ms integer Track length in milliseconds media_kind string Media type of this track: music , movie , podcast , audiobook , musicvideo , tvshow data_kind string Data type of this track: file , url , spotify , pipe path string Path uri string Resource identifier artwork_url string (optional) Artwork url type string file (codec) type (ie mp3/flac/...) bitrate string file bitrate (ie 192/128/...) samplerate string file sample rate (ie 44100/48000/...) channel string file channel (ie mono/stereo/xx ch)) 1.9.2 playlist object Key Type Value id string Playlist id name string Playlist name path string Path smart_playlist boolean true if playlist is a smart playlist uri string Resource identifier 1.9.3 artist object Key Type Value id string Artist id name string Artist name name_sort string Artist sort name album_count integer Number of albums track_count integer Number of tracks length_ms integer Total length of tracks in milliseconds uri string Resource identifier artwork_url string (optional) Artwork url 1.9.4 album object Key Type Value id string Album id name string Album name name_sort string Album sort name artist_id string Album artist id artist string Album artist name track_count integer Number of tracks length_ms integer Total length of tracks in milliseconds uri string Resource identifier artwork_url string (optional) Artwork url 1.9.5 track object Key Type Value id string Track id title string Title title_sort string Sort title artist string Track artist name artist_sort string Track artist sort name album string Album name album_sort string Album sort name album_id string Album id album_artist string Album artist name album_artist_sort string Album artist sort name album_artist_id string Album artist id composer string Track composer genre string Genre year integer Release year track_number integer Track number disc_number integer Disc number length_ms integer Track length in milliseconds rating integer Track rating (ranges from 0 to 100) play_count integer How many times the track was played skip_count integer How many times the track was skipped time_played string Timestamp in ISO 8601 format time_skipped string Timestamp in ISO 8601 format time_added string Timestamp in ISO 8601 format date_released string Date in the format yyyy-mm-dd seek_ms integer Resume point in milliseconds (available only for podcasts and audiobooks) media_kind string Media type of this track: music , movie , podcast , audiobook , musicvideo , tvshow data_kind string Data type of this track: file , url , spotify , pipe path string Path uri string Resource identifier artwork_url string (optional) Artwork url 1.9.6 paging object Key Type Value items array Array of result objects total integer Total number of items offset integer Requested offset of the first item limit integer Requested maximum number of items 1.9.7 genre object Key Type Value name string Name of genre 1.9.8 directory object Key Type Value path string Directory path 1.9.9 category object Key Type Value name string Category name options array Array of option in this category 1.9.10 option object Key Type Value name string Option name type integer The type of the value for this option ( 0 : integer, 1 : boolean, 2 : string) value (integer / boolean / string) Current value for this option 1.9.11 Artwork urls Artwork urls in queue item , artist , album and track objects can be either relative urls or absolute urls to the artwork image. Absolute artwork urls are pointing to external artwork images (e. g. for radio streams that provide artwork metadata), while relative artwork urls are served from forked-daapd. It is possible to add the query parameters maxwidth and/or maxheight to relative artwork urls, in order to get a smaller image (forked-daapd only scales down never up). Note that even if a relative artwork url attribute is present, it is not guaranteed to exist.","title":"JSON API"},{"location":"README_JSON_API/#1-forked-daapd-api-endpoint-reference","text":"Available API endpoints: Player : control playback, volume, shuffle/repeat modes Outputs / Speakers : list available outputs and enable/disable outputs Queue : list, add or modify the current queue Library : list playlists, artists, albums and tracks from your library or trigger library rescan Search : search for playlists, artists, albums and tracks Server info : get server information Settings : list and change settings for the player web interface Push notifications : receive push notifications JSON-Object model: Queue item Playlist Artist Album Track","title":"1. forked-daapd API Endpoint Reference"},{"location":"README_JSON_API/#11-player","text":"Method Endpoint Description GET /api/player Get player status PUT /api/player/play, /api/player/pause, /api/player/stop, /api/player/toggle Start, pause or stop playback PUT /api/player/next, /api/player/previous Skip forward or backward PUT /api/player/shuffle Set shuffle mode PUT /api/player/consume Set consume mode PUT /api/player/repeat Set repeat mode PUT /api/player/volume Set master volume or volume for a specific output PUT /api/player/seek Seek to a position in the currently playing track","title":"1.1 Player"},{"location":"README_JSON_API/#111-get-player-status","text":"Endpoint GET /api/player Response Key Type Value state string play , pause or stop repeat string off , all or single consume boolean true if consume mode is enabled shuffle boolean true if shuffle mode is enabled volume integer Master volume in percent (0 - 100) item_id integer The current playing queue item id item_length_ms integer Total length in milliseconds of the current queue item item_progress_ms integer Progress into the current queue item in milliseconds Example curl -X GET \"http://localhost:3689/api/player\" { \"state\": \"pause\", \"repeat\": \"off\", \"consume\": false, \"shuffle\": false, \"volume\": 50, \"item_id\": 269, \"item_length_ms\": 278093, \"item_progress_ms\": 3674 }","title":"1.1.1 Get player status"},{"location":"README_JSON_API/#112-control-playback","text":"Start or resume, pause, stop playback. Endpoint PUT /api/player/play PUT /api/player/pause PUT /api/player/stop PUT /api/player/toggle Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/play\" curl -X PUT \"http://localhost:3689/api/player/pause\" curl -X PUT \"http://localhost:3689/api/player/stop\" curl -X PUT \"http://localhost:3689/api/player/toggle\"","title":"1.1.2 Control playback"},{"location":"README_JSON_API/#113-skip-tracks","text":"Skip forward or backward Endpoint PUT /api/player/next PUT /api/player/previous Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/next\" curl -X PUT \"http://localhost:3689/api/player/previous\"","title":"1.1.3 Skip tracks"},{"location":"README_JSON_API/#114-set-shuffle-mode","text":"Enable or disable shuffle mode Endpoint PUT /api/player/shuffle Query parameters Parameter Value state The new shuffle state, should be either true or false Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/shuffle?state=true\"","title":"1.1.4 Set shuffle mode"},{"location":"README_JSON_API/#115-set-consume-mode","text":"Enable or disable consume mode Endpoint PUT /api/player/consume Query parameters Parameter Value state The new consume state, should be either true or false Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/consume?state=true\"","title":"1.1.5 Set consume mode"},{"location":"README_JSON_API/#116-set-repeat-mode","text":"Change repeat mode Endpoint PUT /api/player/repeat Query parameters Parameter Value state The new repeat mode, should be either off , all or single Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/repeat?state=all\"","title":"1.1.6 Set repeat mode"},{"location":"README_JSON_API/#117-set-volume","text":"Change master volume or volume of a specific output. Endpoint PUT /api/player/volume Query parameters Parameter Value volume The new volume (0 - 100) step The increase or decrease volume by the given amount (-100 - 100) output_id (Optional) If an output id is given, only the volume of this output will be changed. If parameter is omited, the master volume will be changed. Either volume or step must be present as query parameter Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/player/volume?volume=50\" curl -X PUT \"http://localhost:3689/api/player/volume?step=-5\" curl -X PUT \"http://localhost:3689/api/player/volume?volume=50&output_id=0\"","title":"1.1.7 Set volume"},{"location":"README_JSON_API/#118-seek","text":"Seek to a position in the currently playing track. Endpoint PUT /api/player/seek Query parameters Parameter Value position_ms The new position in milliseconds to seek to seek_ms A relative amount of milliseconds to seek to Response On success returns the HTTP 204 No Content success status response code. Example Seek to position: curl -X PUT \"http://localhost:3689/api/player/seek?position_ms=2000\" Relative seeking (skip 30 seconds backwards): curl -X PUT \"http://localhost:3689/api/player/seek?seek_ms=-30000\"","title":"1.1.8 Seek"},{"location":"README_JSON_API/#12-outputs-speakers","text":"Method Endpoint Description GET /api/outputs Get a list of available outputs PUT /api/outputs/set Set enabled outputs GET /api/outputs/{id} Get an output PUT /api/outputs/{id} Change an output (enable/disable or volume) PUT /api/outputs/{id}/toggle Enable or disable an output, depending on the current state","title":"1.2 Outputs / Speakers"},{"location":"README_JSON_API/#121-get-a-list-of-available-outputs","text":"Endpoint GET /api/outputs Response Key Type Value outputs array Array of output objects output object Key Type Value id string Output id name string Output name type string Type of the output: AirPlay , Chromecast , ALSA , Pulseaudio , fifo selected boolean true if output is enabled has_password boolean true if output is password protected requires_auth boolean true if output requires authentication needs_auth_key boolean true if output requires an authorization key (device verification) volume integer Volume in percent (0 - 100) Example curl -X GET \"http://localhost:3689/api/outputs\" { \"outputs\": [ { \"id\": \"123456789012345\", \"name\": \"kitchen\", \"type\": \"AirPlay\", \"selected\": true, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 0 }, { \"id\": \"0\", \"name\": \"Computer\", \"type\": \"ALSA\", \"selected\": true, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 19 }, { \"id\": \"100\", \"name\": \"daapd-fifo\", \"type\": \"fifo\", \"selected\": false, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 0 } ] }","title":"1.2.1 Get a list of available outputs"},{"location":"README_JSON_API/#122-set-enabled-outputs","text":"Set the enabled outputs by passing an array of output ids. forked-daapd enables all outputs with the given ids and disables the remaining outputs. Endpoint PUT /api/outputs/set Body parameters Parameter Type Value outputs array Array of output ids Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/outputs/set\" --data \"{\\\"outputs\\\":[\\\"198018693182577\\\",\\\"0\\\"]}\"","title":"1.2.2 Set enabled outputs"},{"location":"README_JSON_API/#123-get-an-output","text":"Get an output Endpoint GET /api/outputs/{id} Path parameters Parameter Value id Output id Response On success returns the HTTP 200 OK success status response code. With the response body holding the output object . Example curl -X GET \"http://localhost:3689/api/outputs/0\" { \"id\": \"0\", \"name\": \"Computer\", \"type\": \"ALSA\", \"selected\": true, \"has_password\": false, \"requires_auth\": false, \"needs_auth_key\": false, \"volume\": 3 }","title":"1.2.3 Get an output"},{"location":"README_JSON_API/#124-change-an-output","text":"Enable or disable an output and change its volume. Endpoint PUT /api/outputs/{id} Path parameters Parameter Value id Output id Body parameters Parameter Type Value selected boolean (Optional) true to enable and false to disable the output volume integer (Optional) Volume in percent (0 - 100) Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/outputs/0\" --data \"{\\\"selected\\\":true, \\\"volume\\\": 50}\"","title":"1.2.4 Change an output"},{"location":"README_JSON_API/#125-toggle-an-output","text":"Enable or disable an output, depending on its current state Endpoint PUT /api/outputs/{id}/toggle Path parameters Parameter Value id Output id Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/outputs/0/toggle\"","title":"1.2.5 Toggle an output"},{"location":"README_JSON_API/#13-queue","text":"Method Endpoint Description GET /api/queue Get a list of queue items PUT /api/queue/clear Remove all items from the queue POST /api/queue/items/add Add items to the queue PUT /api/queue/items/{id} Move a queue item in the queue DELETE /api/queue/items/{id} Remove a queue item form the queue","title":"1.3 Queue"},{"location":"README_JSON_API/#131-list-queue-items","text":"Lists the items in the current queue Endpoint GET /api/queue Query parameters Parameter Value id (Optional) If a queue item id is given, only the item with the id will be returend. start (Optional) If a start and an end position is given, only the items from start (included) to end (excluded) will be returned. If only a start position is given, only the item at this position will be returned. end (Optional) See start parameter Response Key Type Value version integer Version number of the current queue count integer Number of items in the current queue items array Array of queue item objects Example curl -X GET \"http://localhost:3689/api/queue\" { \"version\": 833, \"count\": 20, \"items\": [ { \"id\": 12122, \"position\": 0, \"track_id\": 10749, \"title\": \"Angels\", \"artist\": \"The xx\", \"artist_sort\": \"xx, The\", \"album\": \"Coexist\", \"album_sort\": \"Coexist\", \"albumartist\": \"The xx\", \"albumartist_sort\": \"xx, The\", \"genre\": \"Indie Rock\", \"year\": 2012, \"track_number\": 1, \"disc_number\": 1, \"length_ms\": 171735, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/The xx/Coexist/01 Angels.mp3\", \"uri\": \"library:track:10749\" }, ... ] }","title":"1.3.1 List queue items"},{"location":"README_JSON_API/#132-clearing-the-queue","text":"Remove all items form the current queue Endpoint PUT /api/queue/clear Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/queue/clear\"","title":"1.3.2 Clearing the queue"},{"location":"README_JSON_API/#133-adding-items-to-the-queue","text":"Add tracks, playlists artists or albums to the current queue Endpoint POST /api/queue/items/add Query parameters Parameter Value uris Comma seperated list of resource identifiers ( track , playlist , artist or album object uri ) expression A smart playlist query expression identifying the tracks that will be added to the queue. position (Optional) If a position is given, new items are inserted starting from this position into the queue. playback (Optional) If the playback parameter is set to start , playback will be started after adding the new items. playback_from_position (Optional) If the playback parameter is set to start , playback will be started with the queue item at the position given in playback_from_position . clear (Optional) If the clear parameter is set to true , the queue will be cleared before adding the new items. shuffle (Optional) If the shuffle parameter is set to true , the shuffle mode is activated. If it is set to something else, the shuffle mode is deactivated. To leave the shuffle mode untouched the parameter should be ommited. Either the uris or the expression parameter must be set. If both are set the uris parameter takes presedence and the expression parameter will be ignored. Response On success returns the HTTP 200 OK success status response code. Key Type Value count integer number of tracks added to the queue Example Add new items by uri: curl -X POST \"http://localhost:3689/api/queue/items/add?uris=library:playlist:68,library:artist:2932599850102967727\" { \"count\": 42 } Add new items by query language: curl -X POST \"http://localhost:3689/api/queue/items/add?expression=media_kind+is+music\" { \"count\": 42 }","title":"1.3.3 Adding items to the queue"},{"location":"README_JSON_API/#134-moving-a-queue-item","text":"Move a queue item in the current queue Endpoint PUT /api/queue/items/{id} Path parameters Parameter Value id Queue item id Query parameters Parameter Value new_position The new position for the queue item in the current queue. Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/queue/items/3?new_position=0\"","title":"1.3.4 Moving a queue item"},{"location":"README_JSON_API/#135-removing-a-queue-item","text":"Remove a queue item from the current queue Endpoint DELETE /api/queue/items/{id} Path parameters Parameter Value id Queue item id Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/queue/items/2\"","title":"1.3.5 Removing a queue item"},{"location":"README_JSON_API/#14-library","text":"Method Endpoint Description GET /api/library Get library information GET /api/library/playlists Get a list of playlists GET /api/library/playlists/{id} Get a playlist GET /api/library/playlists/{id}/tracks Get list of tracks for a playlist GET /api/library/artists Get a list of artists GET /api/library/artists/{id} Get an artist GET /api/library/artists/{id}/albums Get list of albums for an artist GET /api/library/albums Get a list of albums GET /api/library/albums/{id} Get an album GET /api/library/albums/{id}/tracks Get list of tracks for an album GET /api/library/tracks/{id} Get a track PUT /api/library/tracks/{id} Update a tracks properties (rating, play_count) GET /api/library/genres Get list of genres GET /api/library/count Get count of tracks, artists and albums GET /api/library/files Get list of directories in the local library PUT /api/update Trigger a library rescan PUT /api/rescan Trigger a library metadata rescan","title":"1.4 Library"},{"location":"README_JSON_API/#141-library-information","text":"List some library stats Endpoint GET /api/library Response Key Type Value songs integer Array of playlist objects db_playtime integer Total playtime of all songs in the library artists integer Number of album artists in the library albums integer Number of albums in the library started_at string Server startup time (timestamp in ISO 8601 format) updated_at string Last library update (timestamp in ISO 8601 format) updating boolean true if library rescan is in progress Example curl -X GET \"http://localhost:3689/api/library\" { \"songs\": 217, \"db_playtime\": 66811, \"artists\": 9, \"albums\": 19, \"started_at\": \"2018-11-19T19:06:08Z\", \"updated_at\": \"2018-11-19T19:06:16Z\", \"updating\": false }","title":"1.4.1 Library information"},{"location":"README_JSON_API/#142-list-playlists","text":"Lists the playlists in your library Endpoint GET /api/library/playlists Query parameters Parameter Value offset (Optional) Offset of the first playlist to return limit (Optional) Maximum number of playlists to return Response Key Type Value items array Array of playlist objects total integer Total number of playlists in the library offset integer Requested offset of the first playlist limit integer Requested maximum number of playlists Example curl -X GET \"http://localhost:3689/api/library/playlists\" { \"items\": [ { \"id\": 1, \"name\": \"radio\", \"path\": \"/music/srv/radio.m3u\", \"smart_playlist\": false, \"uri\": \"library:playlist:1\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 }","title":"1.4.2 List playlists"},{"location":"README_JSON_API/#143-get-a-playlist","text":"Get a specific playlists in your library Endpoint GET /api/library/playlists/{id} Path parameters Parameter Value id Playlist id Response On success returns the HTTP 200 OK success status response code. With the response body holding the playlist object . Example curl -X GET \"http://localhost:3689/api/library/playlists/1\" { \"id\": 1, \"name\": \"radio\", \"path\": \"/music/srv/radio.m3u\", \"smart_playlist\": false, \"uri\": \"library:playlist:1\" }","title":"1.4.3 Get a playlist"},{"location":"README_JSON_API/#144-list-playlist-tracks","text":"Lists the tracks in a playlists Endpoint GET /api/library/playlists/{id}/tracks Path parameters Parameter Value id Playlist id Query parameters Parameter Value offset (Optional) Offset of the first track to return limit (Optional) Maximum number of tracks to return Response Key Type Value items array Array of track objects total integer Total number of tracks in the playlist offset integer Requested offset of the first track limit integer Requested maximum number of tracks Example curl -X GET \"http://localhost:3689/api/library/playlists/1/tracks\" { \"items\": [ { \"id\": 10766, \"title\": \"Solange wir tanzen\", \"artist\": \"Heinrich\", \"artist_sort\": \"Heinrich\", \"album\": \"Solange wir tanzen\", \"album_sort\": \"Solange wir tanzen\", \"albumartist\": \"Heinrich\", \"albumartist_sort\": \"Heinrich\", \"genre\": \"Electronica\", \"year\": 2014, \"track_number\": 1, \"disc_number\": 1, \"length_ms\": 223085, \"play_count\": 2, \"skip_count\": 1, \"time_played\": \"2018-02-23T10:31:20Z\", \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Heinrich/Solange wir tanzen/01 Solange wir tanzen.mp3\", \"uri\": \"library:track:10766\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 }","title":"1.4.4 List playlist tracks"},{"location":"README_JSON_API/#145-list-artists","text":"Lists the artists in your library Endpoint GET /api/library/artists Query parameters Parameter Value offset (Optional) Offset of the first artist to return limit (Optional) Maximum number of artists to return Response Key Type Value items array Array of artist objects total integer Total number of artists in the library offset integer Requested offset of the first artist limit integer Requested maximum number of artists Example curl -X GET \"http://localhost:3689/api/library/artists\" { \"items\": [ { \"id\": \"3815427709949443149\", \"name\": \"ABAY\", \"name_sort\": \"ABAY\", \"album_count\": 1, \"track_count\": 10, \"length_ms\": 2951554, \"uri\": \"library:artist:3815427709949443149\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 }","title":"1.4.5 List artists"},{"location":"README_JSON_API/#146-get-an-artist","text":"Get a specific artist in your library Endpoint GET /api/library/artists/{id} Path parameters Parameter Value id Artist id Response On success returns the HTTP 200 OK success status response code. With the response body holding the artist object . Example curl -X GET \"http://localhost:3689/api/library/artists/3815427709949443149\" { \"id\": \"3815427709949443149\", \"name\": \"ABAY\", \"name_sort\": \"ABAY\", \"album_count\": 1, \"track_count\": 10, \"length_ms\": 2951554, \"uri\": \"library:artist:3815427709949443149\" }","title":"1.4.6 Get an artist"},{"location":"README_JSON_API/#147-list-artist-albums","text":"Lists the albums of an artist Endpoint GET /api/library/artists/{id}/albums Path parameters Parameter Value id Artist id Query parameters Parameter Value offset (Optional) Offset of the first album to return limit (Optional) Maximum number of albums to return Response Key Type Value items array Array of album objects total integer Total number of albums of this artist offset integer Requested offset of the first album limit integer Requested maximum number of albums Example curl -X GET \"http://localhost:3689/api/library/artists/32561671101664759/albums\" { \"items\": [ { \"id\": \"8009851123233197743\", \"name\": \"Add Violence\", \"name_sort\": \"Add Violence\", \"artist\": \"Nine Inch Nails\", \"artist_id\": \"32561671101664759\", \"track_count\": 5, \"length_ms\": 1634961, \"uri\": \"library:album:8009851123233197743\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 }","title":"1.4.7 List artist albums"},{"location":"README_JSON_API/#148-list-albums","text":"Lists the albums in your library Endpoint GET /api/library/albums Query parameters Parameter Value offset (Optional) Offset of the first album to return limit (Optional) Maximum number of albums to return Response Key Type Value items array Array of album objects total integer Total number of albums in the library offset integer Requested offset of the first albums limit integer Requested maximum number of albums Example curl -X GET \"http://localhost:3689/api/library/albums\" { \"items\": [ { \"id\": \"8009851123233197743\", \"name\": \"Add Violence\", \"name_sort\": \"Add Violence\", \"artist\": \"Nine Inch Nails\", \"artist_id\": \"32561671101664759\", \"track_count\": 5, \"length_ms\": 1634961, \"uri\": \"library:album:8009851123233197743\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 }","title":"1.4.8 List albums"},{"location":"README_JSON_API/#149-get-an-album","text":"Get a specific album in your library Endpoint GET /api/library/albums/{id} Path parameters Parameter Value id Album id Response On success returns the HTTP 200 OK success status response code. With the response body holding the album object . Example curl -X GET \"http://localhost:3689/api/library/albums/8009851123233197743\" { \"id\": \"8009851123233197743\", \"name\": \"Add Violence\", \"name_sort\": \"Add Violence\", \"artist\": \"Nine Inch Nails\", \"artist_id\": \"32561671101664759\", \"track_count\": 5, \"length_ms\": 1634961, \"uri\": \"library:album:8009851123233197743\" }","title":"1.4.9 Get an album"},{"location":"README_JSON_API/#1410-list-album-tracks","text":"Lists the tracks in an album Endpoint GET /api/library/albums/{id}/tracks Path parameters Parameter Value id Album id Query parameters Parameter Value offset (Optional) Offset of the first track to return limit (Optional) Maximum number of tracks to return Response Key Type Value items array Array of track objects total integer Total number of tracks offset integer Requested offset of the first track limit integer Requested maximum number of tracks Example curl -X GET \"http://localhost:3689/api/library/albums/1/tracks\" { \"items\": [ { \"id\": 10766, \"title\": \"Solange wir tanzen\", \"artist\": \"Heinrich\", \"artist_sort\": \"Heinrich\", \"album\": \"Solange wir tanzen\", \"album_sort\": \"Solange wir tanzen\", \"albumartist\": \"Heinrich\", \"albumartist_sort\": \"Heinrich\", \"genre\": \"Electronica\", \"year\": 2014, \"track_number\": 1, \"disc_number\": 1, \"length_ms\": 223085, \"play_count\": 2, \"last_time_played\": \"2018-02-23T10:31:20Z\", \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Heinrich/Solange wir tanzen/01 Solange wir tanzen.mp3\", \"uri\": \"library:track:10766\" }, ... ], \"total\": 20, \"offset\": 0, \"limit\": -1 }","title":"1.4.10 List album tracks"},{"location":"README_JSON_API/#1411-get-a-track","text":"Get a specific track in your library Endpoint GET /api/library/tracks/{id} Path parameters Parameter Value id Track id Response On success returns the HTTP 200 OK success status response code. With the response body holding the track object . Example curl -X GET \"http://localhost:3689/api/library/track/1\" { \"id\": 1, \"title\": \"Pardon Me\", \"title_sort\": \"Pardon Me\", \"artist\": \"Incubus\", \"artist_sort\": \"Incubus\", \"album\": \"Make Yourself\", \"album_sort\": \"Make Yourself\", \"album_id\": \"6683985628074308431\", \"album_artist\": \"Incubus\", \"album_artist_sort\": \"Incubus\", \"album_artist_id\": \"4833612337650426236\", \"composer\": \"Alex Katunich/Brandon Boyd/Chris Kilmore/Jose Antonio Pasillas II/Mike Einziger\", \"genre\": \"Alternative Rock\", \"year\": 2001, \"track_number\": 12, \"disc_number\": 1, \"length_ms\": 223170, \"rating\": 0, \"play_count\": 0, \"skip_count\": 0, \"time_added\": \"2019-01-20T11:58:29Z\", \"date_released\": \"2001-05-27\", \"seek_ms\": 0, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Incubus/Make Yourself/12 Pardon Me.mp3\", \"uri\": \"library:track:1\", \"artwork_url\": \"/artwork/item/1\" }","title":"1.4.11 Get a track"},{"location":"README_JSON_API/#1412-update-track-properties","text":"Change properties of a specific track (supported properties are \"rating\" and \"play_count\") Endpoint PUT /api/library/tracks/{id} Path parameters Parameter Value id Track id Query parameters Parameter Value rating The new rating (0 - 100) play_count Either increment or reset . increment will increment play_count and update time_played , reset will set play_count and skip_count to zero and delete time_played and time_skipped Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/library/tracks/1?rating=100\" curl -X PUT \"http://localhost:3689/api/library/tracks/1?play_count=increment\"","title":"1.4.12 Update track properties"},{"location":"README_JSON_API/#1413-list-genres","text":"Get list of genres Endpoint GET /api/library/genres Response Key Type Value items array Array of genre objects total integer Total number of genres in the library offset integer Requested offset of the first genre limit integer Requested maximum number of genres Example curl -X GET \"http://localhost:3689/api/library/genres\" { \"items\": [ { \"name\": \"Classical\" }, { \"name\": \"Drum & Bass\" }, { \"name\": \"Pop\" }, { \"name\": \"Rock/Pop\" }, { \"name\": \"'90s Alternative\" } ], \"total\": 5, \"offset\": 0, \"limit\": -1 }","title":"1.4.13 List genres"},{"location":"README_JSON_API/#1414-list-albums-for-genre","text":"Lists the albums in a genre Endpoint GET api/search?type=albums&expression=genre+is+\\\"{genre name}\\\"\" Query parameters Parameter Value genre genre name (uri encoded and html esc seq for chars: '/&) offset (Optional) Offset of the first album to return limit (Optional) Maximum number of albums to return Response Key Type Value items array Array of album objects total integer Total number of albums in the library offset integer Requested offset of the first albums limit integer Requested maximum number of albums Example curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"Pop\\\"\" curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"Rock%2FPop\\\"\" # Rock/Pop curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"Drum%20%26%20Bass\\\"\" # Drum & Bass curl -X GET \"http://localhost:3689/api/search?type=albums&expression=genre+is+\\\"%2790s%20Alternative\\\"\" # '90 Alternative { \"albums\": { \"items\": [ { \"id\": \"320189328729146437\", \"name\": \"Best Ever\", \"name_sort\": \"Best Ever\", \"artist\": \"ABC\", \"artist_id\": \"8760559201889050080\", \"track_count\": 1, \"length_ms\": 3631, \"uri\": \"library:album:320189328729146437\" }, { \"id\": \"7964595866631625723\", \"name\": \"Greatest Hits\", \"name_sort\": \"Greatest Hits\", \"artist\": \"Marvin Gaye\", \"artist_id\": \"5261930703203735930\", \"track_count\": 2, \"length_ms\": 7262, \"uri\": \"library:album:7964595866631625723\" }, { \"id\": \"3844610748145176456\", \"name\": \"The Very Best of Etta\", \"name_sort\": \"Very Best of Etta\", \"artist\": \"Etta James\", \"artist_id\": \"2627182178555864595\", \"track_count\": 1, \"length_ms\": 177926, \"uri\": \"library:album:3844610748145176456\" } ], \"total\": 3, \"offset\": 0, \"limit\": -1 } }","title":"1.4.14 List albums for genre"},{"location":"README_JSON_API/#1415-get-count-of-tracks-artists-and-albums","text":"Get information about the number of tracks, artists and albums and the total playtime Endpoint GET /api/library/count Query parameters Parameter Value expression (Optional) The smart playlist query expression, if this parameter is omitted returns the information for the whole library Response Key Type Value tracks integer Number of tracks matching the expression artists integer Number of artists matching the expression albums integer Number of albums matching the expression db_playtime integer Total playtime in milliseconds of all tracks matching the expression Example curl -X GET \"http://localhost:3689/api/library/count?expression=data_kind+is+file\" { \"tracks\": 6811, \"artists\": 355, \"albums\": 646, \"db_playtime\": 1590767 }","title":"1.4.15 Get count of tracks, artists and albums"},{"location":"README_JSON_API/#1416-list-local-directories","text":"List the local directories and the directory contents (tracks and playlists) Endpoint GET /api/library/files Query parameters Parameter Value directory (Optional) A path to a directory in your local library. Response Key Type Value directories array Array of directory objects containing the sub directories tracks object paging object containing track objects that matches the directory playlists object paging object containing playlist objects that matches the directory Example curl -X GET \"http://localhost:3689/api/library/files?directory=/music/srv\" { \"directories\": [ { \"path\": \"/music/srv/Audiobooks\" }, { \"path\": \"/music/srv/Music\" }, { \"path\": \"/music/srv/Playlists\" }, { \"path\": \"/music/srv/Podcasts\" } ], \"tracks\": { \"items\": [ { \"id\": 1, \"title\": \"input.pipe\", \"artist\": \"Unknown artist\", \"artist_sort\": \"Unknown artist\", \"album\": \"Unknown album\", \"album_sort\": \"Unknown album\", \"album_id\": \"4201163758598356043\", \"album_artist\": \"Unknown artist\", \"album_artist_sort\": \"Unknown artist\", \"album_artist_id\": \"4187901437947843388\", \"genre\": \"Unknown genre\", \"year\": 0, \"track_number\": 0, \"disc_number\": 0, \"length_ms\": 0, \"play_count\": 0, \"skip_count\": 0, \"time_added\": \"2018-11-24T08:41:35Z\", \"seek_ms\": 0, \"media_kind\": \"music\", \"data_kind\": \"pipe\", \"path\": \"/music/srv/input.pipe\", \"uri\": \"library:track:1\", \"artwork_url\": \"/artwork/item/1\" } ], \"total\": 1, \"offset\": 0, \"limit\": -1 }, \"playlists\": { \"items\": [ { \"id\": 8, \"name\": \"radio\", \"path\": \"/music/srv/radio.m3u\", \"smart_playlist\": true, \"uri\": \"library:playlist:8\" } ], \"total\": 1, \"offset\": 0, \"limit\": -1 } }","title":"1.4.16 List local directories"},{"location":"README_JSON_API/#1417-trigger-rescan","text":"Trigger a library rescan Endpoint PUT /api/update Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/update\" { \"songs\": 217, \"db_playtime\": 66811, \"artists\": 9, \"albums\": 19, \"started_at\": \"2018-11-19T19:06:08Z\", \"updated_at\": \"2018-11-19T19:06:16Z\", \"updating\": false }","title":"1.4.17 Trigger rescan"},{"location":"README_JSON_API/#1418-trigger-metadata-rescan","text":"Trigger a library metadata rescan even if files have not been updated. Maintenence method. Endpoint PUT /api/rescan Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/rescan\"","title":"1.4.18 Trigger metadata rescan"},{"location":"README_JSON_API/#15-search","text":"Method Endpoint Description GET /api/search Search for playlists, artists, albums, tracks,genres by a simple search term GET /api/search Search by complex query expression","title":"1.5 Search"},{"location":"README_JSON_API/#151-search-by-search-term","text":"Search for playlists, artists, albums, tracks, genres that include the given query in their title (case insensitive matching). Endpoint GET /api/search Query parameters Parameter Value query The search keyword type Comma separated list of the result types ( playlist , artist , album , track , genre ) media_kind (Optional) Filter results by media kind ( music , movie , podcast , audiobook , musicvideo , tvshow ). Filter only applies to artist, album and track result types. offset (Optional) Offset of the first item to return for each type limit (Optional) Maximum number of items to return for each type Response Key Type Value tracks object paging object containing track objects that matches the query artists object paging object containing artist objects that matches the query albums object paging object containing album objects that matches the query playlists object paging object containing playlist objects that matches the query Example Search for all tracks, artists, albums and playlists that contain \"the\" in their title and return the first two results for each type: curl -X GET \"http://localhost:3689/api/search?type=tracks,artists,albums,playlists&query=the&offset=0&limit=2\" { \"tracks\": { \"items\": [ { \"id\": 35, \"title\": \"Another Love\", \"artist\": \"Tom Odell\", \"artist_sort\": \"Tom Odell\", \"album\": \"Es is was es is\", \"album_sort\": \"Es is was es is\", \"album_id\": \"6494853621007413058\", \"album_artist\": \"Various artists\", \"album_artist_sort\": \"Various artists\", \"album_artist_id\": \"8395563705718003786\", \"genre\": \"Singer/Songwriter\", \"year\": 2013, \"track_number\": 7, \"disc_number\": 1, \"length_ms\": 251030, \"play_count\": 0, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Compilations/Es is was es is/07 Another Love.m4a\", \"uri\": \"library:track:35\" }, { \"id\": 215, \"title\": \"Away From the Sun\", \"artist\": \"3 Doors Down\", \"artist_sort\": \"3 Doors Down\", \"album\": \"Away From the Sun\", \"album_sort\": \"Away From the Sun\", \"album_id\": \"8264078270267374619\", \"album_artist\": \"3 Doors Down\", \"album_artist_sort\": \"3 Doors Down\", \"album_artist_id\": \"5030128490104968038\", \"genre\": \"Rock\", \"year\": 2002, \"track_number\": 2, \"disc_number\": 1, \"length_ms\": 233278, \"play_count\": 0, \"media_kind\": \"music\", \"data_kind\": \"file\", \"path\": \"/music/srv/Away From the Sun/02 Away From the Sun.mp3\", \"uri\": \"library:track:215\" } ], \"total\": 14, \"offset\": 0, \"limit\": 2 }, \"artists\": { \"items\": [ { \"id\": \"8737690491750445895\", \"name\": \"The xx\", \"name_sort\": \"xx, The\", \"album_count\": 2, \"track_count\": 25, \"length_ms\": 5229196, \"uri\": \"library:artist:8737690491750445895\" } ], \"total\": 1, \"offset\": 0, \"limit\": 2 }, \"albums\": { \"items\": [ { \"id\": \"8264078270267374619\", \"name\": \"Away From the Sun\", \"name_sort\": \"Away From the Sun\", \"artist\": \"3 Doors Down\", \"artist_id\": \"5030128490104968038\", \"track_count\": 12, \"length_ms\": 2818174, \"uri\": \"library:album:8264078270267374619\" }, { \"id\": \"6835720495312674468\", \"name\": \"The Better Life\", \"name_sort\": \"Better Life\", \"artist\": \"3 Doors Down\", \"artist_id\": \"5030128490104968038\", \"track_count\": 11, \"length_ms\": 2393332, \"uri\": \"library:album:6835720495312674468\" } ], \"total\": 3, \"offset\": 0, \"limit\": 2 }, \"playlists\": { \"items\": [], \"total\": 0, \"offset\": 0, \"limit\": 2 } }","title":"1.5.1 Search by search term"},{"location":"README_JSON_API/#152-search-by-query-language","text":"Search for artists, albums, tracks by a smart playlist query expression (see README_SMARTPL.md for the expression syntax). Endpoint GET /api/search Query parameters Parameter Value expression The smart playlist query expression type Comma separated list of the result types ( artist , album , track offset (Optional) Offset of the first item to return for each type limit (Optional) Maximum number of items to return for each type Response Key Type Value tracks object paging object containing track objects that matches the query artists object paging object containing artist objects that matches the query albums object paging object containing album objects that matches the query Example Search for music tracks ordered descending by the time added to the library and limit result to 2 items: curl -X GET \"http://localhost:3689/api/search?type=tracks&expression=media_kind+is+music+order+by+time_added+desc&offset=0&limit=2\"","title":"1.5.2 Search by query language"},{"location":"README_JSON_API/#16-server-info","text":"Method Endpoint Description GET /api/config Get configuration information","title":"1.6 Server info"},{"location":"README_JSON_API/#161-config","text":"Endpoint GET /api/config Response Key Type Value version string forked-daapd server version websocket_port integer Port number for the websocket (or 0 if websocket is disabled) buildoptions array Array of strings indicating which features are supported by the forked-daapd server Example curl -X GET \"http://localhost:3689/api/config\" { \"websocket_port\": 3688, \"version\": \"25.0\", \"buildoptions\": [ \"ffmpeg\", \"iTunes XML\", \"Spotify\", \"LastFM\", \"MPD\", \"Device verification\", \"Websockets\", \"ALSA\" ] }","title":"1.6.1 Config"},{"location":"README_JSON_API/#17-settings","text":"Method Endpoint Description GET /api/settings Get all available categories GET /api/settings/{category-name} Get all available options for a category GET /api/settings/{category-name}/{option-name} Get a single setting option PUT /api/settings/{category-name}/{option-name} Change the value of a setting option","title":"1.7 Settings"},{"location":"README_JSON_API/#171-list-categories","text":"List all settings categories with their options Endpoint GET /api/settings Response Key Type Value categories array Array of settings category objects Example curl -X GET \"http://localhost:3689/api/settings\" { \"categories\": [ { \"name\": \"webinterface\", \"options\": [ { \"name\": \"show_composer_now_playing\", \"type\": 1, \"value\": true }, { \"name\": \"show_composer_for_genre\", \"type\": 2, \"value\": \"classical\" } ] } ] }","title":"1.7.1 List categories"},{"location":"README_JSON_API/#172-get-a-category","text":"Get a settings category with their options Endpoint GET /api/settings/{category-name} Response Returns a settings category object Example curl -X GET \"http://localhost:3689/api/settings/webinterface\" { \"name\": \"webinterface\", \"options\": [ { \"name\": \"show_composer_now_playing\", \"type\": 1, \"value\": true }, { \"name\": \"show_composer_for_genre\", \"type\": 2, \"value\": \"classical\" } ] }","title":"1.7.2 Get a category"},{"location":"README_JSON_API/#173-get-a-option","text":"Get a single settings option Endpoint GET /api/settings/{category-name}/{option-name} Response Returns a settings option object Example curl -X GET \"http://localhost:3689/api/settings/webinterface/show_composer_now_playing\" { \"name\": \"show_composer_now_playing\", \"type\": 1, \"value\": true }","title":"1.7.3 Get a option"},{"location":"README_JSON_API/#174-change-a-option-value","text":"Get a single settings option Endpoint PUT /api/settings/{category-name}/{option-name} Request Key Type Value name string Option name value (integer / boolean / string) New option value Response On success returns the HTTP 204 No Content success status response code. Example curl -X PUT \"http://localhost:3689/api/settings/webinterface/show_composer_now_playing\" --data \"{\\\"name\\\":\\\"show_composer_now_playing\\\",\\\"value\\\":true}\"","title":"1.7.4 Change a option value"},{"location":"README_JSON_API/#18-push-notifications","text":"If forked-daapd was built with websocket support, forked-daapd exposes a websocket at localhost:3688 to inform clients of changes (e. g. player state or library updates). The port depends on the forked-daapd configuration and can be read using the /api/config endpoint. After connecting to the websocket, the client should send a message containing the event types it is interested in. After that forked-daapd will send a message each time one of the events occurred. Message Key Type Value notify array Array of event types Event types Type Description update Library update started or finished database Library database changed (new/modified/deleted tracks) outputs An output was enabled or disabled player Player state changes options Playback option changes (shuffle, repeat, consume mode) volume Volume changes queue Queue changes Example curl --include \\ --no-buffer \\ --header \"Connection: Upgrade\" \\ --header \"Upgrade: websocket\" \\ --header \"Host: localhost:3688\" \\ --header \"Origin: http://localhost:3688\" \\ --header \"Sec-WebSocket-Key: SGVsbG8sIHdvcmxkIQ==\" \\ --header \"Sec-WebSocket-Version: 13\" \\ --header \"Sec-WebSocket-Protocol: notify\" \\ http://localhost:3688/ \\ --data \"{ \\\"notify\\\": [ \\\"player\\\" ] }\" { \"notify\": [ \"player\" ] }","title":"1.8 Push notifications"},{"location":"README_JSON_API/#19-object-model","text":"","title":"1.9 Object model"},{"location":"README_JSON_API/#191-queue-item-object","text":"Key Type Value id string Item id position integer Position in the queue (starting with zero) track_id string Track id title string Title artist string Track artist name artist_sort string Track artist sort name album string Album name album_sort string Album sort name album_id string Album id album_artist string Album artist name album_artist_sort string Album artist sort name album_artist_id string Album artist id composer string Composer (optional) genre string Genre year integer Release year track_number integer Track number disc_number integer Disc number length_ms integer Track length in milliseconds media_kind string Media type of this track: music , movie , podcast , audiobook , musicvideo , tvshow data_kind string Data type of this track: file , url , spotify , pipe path string Path uri string Resource identifier artwork_url string (optional) Artwork url type string file (codec) type (ie mp3/flac/...) bitrate string file bitrate (ie 192/128/...) samplerate string file sample rate (ie 44100/48000/...) channel string file channel (ie mono/stereo/xx ch))","title":"1.9.1 queue item object"},{"location":"README_JSON_API/#192-playlist-object","text":"Key Type Value id string Playlist id name string Playlist name path string Path smart_playlist boolean true if playlist is a smart playlist uri string Resource identifier","title":"1.9.2 playlist object"},{"location":"README_JSON_API/#193-artist-object","text":"Key Type Value id string Artist id name string Artist name name_sort string Artist sort name album_count integer Number of albums track_count integer Number of tracks length_ms integer Total length of tracks in milliseconds uri string Resource identifier artwork_url string (optional) Artwork url","title":"1.9.3 artist object"},{"location":"README_JSON_API/#194-album-object","text":"Key Type Value id string Album id name string Album name name_sort string Album sort name artist_id string Album artist id artist string Album artist name track_count integer Number of tracks length_ms integer Total length of tracks in milliseconds uri string Resource identifier artwork_url string (optional) Artwork url","title":"1.9.4 album object"},{"location":"README_JSON_API/#195-track-object","text":"Key Type Value id string Track id title string Title title_sort string Sort title artist string Track artist name artist_sort string Track artist sort name album string Album name album_sort string Album sort name album_id string Album id album_artist string Album artist name album_artist_sort string Album artist sort name album_artist_id string Album artist id composer string Track composer genre string Genre year integer Release year track_number integer Track number disc_number integer Disc number length_ms integer Track length in milliseconds rating integer Track rating (ranges from 0 to 100) play_count integer How many times the track was played skip_count integer How many times the track was skipped time_played string Timestamp in ISO 8601 format time_skipped string Timestamp in ISO 8601 format time_added string Timestamp in ISO 8601 format date_released string Date in the format yyyy-mm-dd seek_ms integer Resume point in milliseconds (available only for podcasts and audiobooks) media_kind string Media type of this track: music , movie , podcast , audiobook , musicvideo , tvshow data_kind string Data type of this track: file , url , spotify , pipe path string Path uri string Resource identifier artwork_url string (optional) Artwork url","title":"1.9.5 track object"},{"location":"README_JSON_API/#196-paging-object","text":"Key Type Value items array Array of result objects total integer Total number of items offset integer Requested offset of the first item limit integer Requested maximum number of items","title":"1.9.6 paging object"},{"location":"README_JSON_API/#197-genre-object","text":"Key Type Value name string Name of genre","title":"1.9.7 genre object"},{"location":"README_JSON_API/#198-directory-object","text":"Key Type Value path string Directory path","title":"1.9.8 directory object"},{"location":"README_JSON_API/#199-category-object","text":"Key Type Value name string Category name options array Array of option in this category","title":"1.9.9 category object"},{"location":"README_JSON_API/#1910-option-object","text":"Key Type Value name string Option name type integer The type of the value for this option ( 0 : integer, 1 : boolean, 2 : string) value (integer / boolean / string) Current value for this option","title":"1.9.10 option object"},{"location":"README_JSON_API/#1911-artwork-urls","text":"Artwork urls in queue item , artist , album and track objects can be either relative urls or absolute urls to the artwork image. Absolute artwork urls are pointing to external artwork images (e. g. for radio streams that provide artwork metadata), while relative artwork urls are served from forked-daapd. It is possible to add the query parameters maxwidth and/or maxheight to relative artwork urls, in order to get a smaller image (forked-daapd only scales down never up). Note that even if a relative artwork url attribute is present, it is not guaranteed to exist.","title":"1.9.11 Artwork urls"},{"location":"README_PLAYER_WEBINTERFACE/","text":"1. forked-daapd player web interface Mobile friendly player web interface for forked-daapd build with Vue.js , Bulma . 1.1 Screenshots 1.2 Usage You can find forked-daapd's web interface at http://forked-daapd.local:3689 or alternatively at http://[your_server_address_here]:3689 . 1.3 Build Setup The source is located in the web-src folder. cd web-src It is based on the Vue.js webpack template. For a detailed explanation on how things work, check out the guide and docs for vue-loader . # install dependencies npm install # serve with hot reload at localhost:8080 npm run dev # build for production with minification (will update player web interface in \"../htdocs\") npm run build # build for production and view the bundle analyzer report npm run build --report After running npm run dev the web interface is reachable at localhost:8080 . By default it expects forked-daapd to be running at localhost:3689 and proxies all JSON API calls to this location. If forked-daapd is running at a different location you need to modify the proxyTable configuration in config/index.js","title":"WEBINTERFACE"},{"location":"README_PLAYER_WEBINTERFACE/#1-forked-daapd-player-web-interface","text":"Mobile friendly player web interface for forked-daapd build with Vue.js , Bulma .","title":"1. forked-daapd player web interface"},{"location":"README_PLAYER_WEBINTERFACE/#11-screenshots","text":"","title":"1.1 Screenshots"},{"location":"README_PLAYER_WEBINTERFACE/#12-usage","text":"You can find forked-daapd's web interface at http://forked-daapd.local:3689 or alternatively at http://[your_server_address_here]:3689 .","title":"1.2 Usage"},{"location":"README_PLAYER_WEBINTERFACE/#13-build-setup","text":"The source is located in the web-src folder. cd web-src It is based on the Vue.js webpack template. For a detailed explanation on how things work, check out the guide and docs for vue-loader . # install dependencies npm install # serve with hot reload at localhost:8080 npm run dev # build for production with minification (will update player web interface in \"../htdocs\") npm run build # build for production and view the bundle analyzer report npm run build --report After running npm run dev the web interface is reachable at localhost:8080 . By default it expects forked-daapd to be running at localhost:3689 and proxies all JSON API calls to this location. If forked-daapd is running at a different location you need to modify the proxyTable configuration in config/index.js","title":"1.3 Build Setup"},{"location":"README_PULSE/","text":"1. forked-daapd and Pulseaudio You have the choice of runnning Pulseaudio either in system mode or user mode. For headless servers, i.e. systems without desktop users, system mode is recommended. If there is a desktop user logged in most of the time, a setup with network access via localhost only for daemons is a more appropriate solution, since the normal user administration (with, e.g., pulseaudio -k ) works as advertised. Also, the user specific configuration for pulseaudio is preserved across sessions as expected. System mode User mode 1.1 System Mode with Bluetooth support Credit: Rob Pope This guide was written based on headless Debian Jessie platforms. Most of the instructions will require that you are root. 1.1.1 Step 1: Setting up Pulseaudio If you see a \"Connection refused\" error when starting forked-daapd, then you will probably need to setup Pulseaudio to run in system mode [1]. This means that the Pulseaudio daemon will be started during boot and be available to all users. How to start Pulseaudio depends on your distribution, but in many cases you will need to add a pulseaudio.service file to /etc/systemd/system with the following content: # systemd service file for Pulseaudio running in system mode [Unit] Description=Pulseaudio sound server Before=sound.target [Service] ExecStart=/usr/bin/pulseaudio --system --disallow-exit [Install] WantedBy=multi-user.target If you want Bluetooth support, you must also configure Pulseaudio to load the Bluetooth module. First install it (Debian: apt install pulseaudio-module-bluetooth ) and then add the following to /etc/pulse/system.pa: #### Enable Bluetooth .ifexists module-bluetooth-discover.so load-module module-bluetooth-discover .endif Now you need to make sure that Pulseaudio can communicate with the Bluetooth daemon through D-Bus. On Raspbian this is already enabled, and you can skip this step. Otherwise do one of the following: Add the pulse user to the bluetooth group: adduser pulse bluetooth Edit /etc/dbus-1/system.d/bluetooth.conf and change the policy for \\<policy context=\"default\"> to \"allow\" Phew, almost done with Pulseaudio! Now you should: 1. enable system mode on boot with systemctl enable pulseaudio 2. reboot (or at least restart dbus and pulseaudio) 3. check that the Bluetooth module is loaded with pactl list modules short 1.1.2 Step 2: Setting up forked-daapd Add the user forked-daapd is running as (typically \"daapd\") to the \"pulse-access\" group: adduser daapd pulse-access Now (re)start forked-daapd. 1.1.3 Step 3: Adding a Bluetooth device To connect with the device, run bluetoothctl and then: power on agent on scan on **Note MAC address of BT Speaker** pair [MAC address] **Type Pin if prompted** trust [MAC address] connect [MAC address] Now the speaker should appear in forked-daapd. You can also verify that Pulseaudio has detected the speaker with pactl list sinks short . 1.2 User Mode with Network Access Credit: wolfmanx and this blog 1.2.1 Step 1: Copy system pulseaudio configuration to the users home directory mkdir -p ~/.pulse cp /etc/pulse/default.pa ~/.pulse/ 1.2.2 Step 2: Enable TCP access from localhost only Edit the file ~/.pulse/default.pa , adding the following line at the end: load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 1.2.3 Step 3: Restart the pulseaudio deamon pulseaudio -k # OR pulseaudio -D 1.2.4 Step 4: Adjust configuration file In the audio section of /etc/forked-daapd.conf , set server to localhost : server = \"localhost\" [1] Note that Pulseaudio will warn against system mode. However, in this use case it is actually the solution recommended by the Pulseaudio folks themselves .","title":"PULSE"},{"location":"README_PULSE/#1-forked-daapd-and-pulseaudio","text":"You have the choice of runnning Pulseaudio either in system mode or user mode. For headless servers, i.e. systems without desktop users, system mode is recommended. If there is a desktop user logged in most of the time, a setup with network access via localhost only for daemons is a more appropriate solution, since the normal user administration (with, e.g., pulseaudio -k ) works as advertised. Also, the user specific configuration for pulseaudio is preserved across sessions as expected. System mode User mode","title":"1. forked-daapd and Pulseaudio"},{"location":"README_PULSE/#11-system-mode-with-bluetooth-support","text":"Credit: Rob Pope This guide was written based on headless Debian Jessie platforms. Most of the instructions will require that you are root.","title":"1.1 System Mode with Bluetooth support"},{"location":"README_PULSE/#111-step-1-setting-up-pulseaudio","text":"If you see a \"Connection refused\" error when starting forked-daapd, then you will probably need to setup Pulseaudio to run in system mode [1]. This means that the Pulseaudio daemon will be started during boot and be available to all users. How to start Pulseaudio depends on your distribution, but in many cases you will need to add a pulseaudio.service file to /etc/systemd/system with the following content: # systemd service file for Pulseaudio running in system mode [Unit] Description=Pulseaudio sound server Before=sound.target [Service] ExecStart=/usr/bin/pulseaudio --system --disallow-exit [Install] WantedBy=multi-user.target If you want Bluetooth support, you must also configure Pulseaudio to load the Bluetooth module. First install it (Debian: apt install pulseaudio-module-bluetooth ) and then add the following to /etc/pulse/system.pa: #### Enable Bluetooth .ifexists module-bluetooth-discover.so load-module module-bluetooth-discover .endif Now you need to make sure that Pulseaudio can communicate with the Bluetooth daemon through D-Bus. On Raspbian this is already enabled, and you can skip this step. Otherwise do one of the following: Add the pulse user to the bluetooth group: adduser pulse bluetooth Edit /etc/dbus-1/system.d/bluetooth.conf and change the policy for \\<policy context=\"default\"> to \"allow\" Phew, almost done with Pulseaudio! Now you should: 1. enable system mode on boot with systemctl enable pulseaudio 2. reboot (or at least restart dbus and pulseaudio) 3. check that the Bluetooth module is loaded with pactl list modules short","title":"1.1.1 Step 1: Setting up Pulseaudio"},{"location":"README_PULSE/#112-step-2-setting-up-forked-daapd","text":"Add the user forked-daapd is running as (typically \"daapd\") to the \"pulse-access\" group: adduser daapd pulse-access Now (re)start forked-daapd.","title":"1.1.2 Step 2: Setting up forked-daapd"},{"location":"README_PULSE/#113-step-3-adding-a-bluetooth-device","text":"To connect with the device, run bluetoothctl and then: power on agent on scan on **Note MAC address of BT Speaker** pair [MAC address] **Type Pin if prompted** trust [MAC address] connect [MAC address] Now the speaker should appear in forked-daapd. You can also verify that Pulseaudio has detected the speaker with pactl list sinks short .","title":"1.1.3 Step 3: Adding a Bluetooth device"},{"location":"README_PULSE/#12-user-mode-with-network-access","text":"Credit: wolfmanx and this blog","title":"1.2 User Mode with Network Access"},{"location":"README_PULSE/#121-step-1-copy-system-pulseaudio-configuration-to-the-users-home-directory","text":"mkdir -p ~/.pulse cp /etc/pulse/default.pa ~/.pulse/","title":"1.2.1 Step 1: Copy system pulseaudio configuration to the users home directory"},{"location":"README_PULSE/#122-step-2-enable-tcp-access-from-localhost-only","text":"Edit the file ~/.pulse/default.pa , adding the following line at the end: load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1","title":"1.2.2 Step 2: Enable TCP access from localhost only"},{"location":"README_PULSE/#123-step-3-restart-the-pulseaudio-deamon","text":"pulseaudio -k # OR pulseaudio -D","title":"1.2.3 Step 3: Restart the pulseaudio deamon"},{"location":"README_PULSE/#124-step-4-adjust-configuration-file","text":"In the audio section of /etc/forked-daapd.conf , set server to localhost : server = \"localhost\" [1] Note that Pulseaudio will warn against system mode. However, in this use case it is actually the solution recommended by the Pulseaudio folks themselves .","title":"1.2.4 Step 4: Adjust configuration file"},{"location":"README_SMARTPL/","text":"1. forked-daapd smart playlists To add a smart playlist to forked-daapd, create a new text file with a filename ending with .smartpl; the filename doesn't matter, only the .smartpl ending does. The file must be placed somewhere in your library folder. 1.1 Syntax The contents of a smart playlist must follow the syntax: \"Playlist Name\" { expression } There is exactly one smart playlist allowed for a .smartpl file. An expression consists of: field-name operator operand Where valid field-names (with their types) are: * artist (string) * album_artist (string) * album (string) * title (string) * genre (string) * composer (string) * path (string) * type (string) * grouping (string) * data_kind (enumeration) * media_kind (enumeration) * play_count (integer) * skip_count (integer) * rating (integer) * year (integer) * compilation (integer) * track (integer) * disc (integer) * time_added (date) * time_modified (date) * time_played (date) * time_skipped (date) Valid operators include: * is , includes , starts with (string) * > , < , <= , >= , = (int) * after , before (date) * is (enumeration) The is operator must exactly match the field value, while the includes operator matches a substring. The starts with operator matches, if the value starts with the given prefix. All three matches are case-insensitive. Valid operands include: * \"string value\" (string) * integer (int) Valid operands for the enumeration data_kind are: * file * url * spotify * pipe Valid operands for the enumeration media_kind are: * music * movie * podcast * audiobook * tvshow Multiple expressions can be anded or ored together, using the keywords OR and AND . The unary not operator is also supported using the keyword NOT . It is possible to define the sort order and limit the number of items by adding an order clause and/or a limit clause after the last expression: \"Playlist Name\" { expression ORDER BY field-name sort-direction LIMIT limit } \"sort-direction\" is either ASC (ascending) or DESC (descending). \"limit\" is the maximum number of items. 1.2 Examples \"techno\" { genre includes \"techno\" and artist includes \"zombie\" } This would match songs by \"Rob Zombie\" or \"White Zombie\", as well as those with a genre of \"Techno-Industrial\" or \"Trance/Techno\", for example. \"techno 2015\" { genre includes \"techno\" and artist includes \"zombie\" and not genre includes \"industrial\" } This would exclude e. g. songs with the genre \"Techno-Industrial\". \"Local music\" { data_kind is file and media_kind is music } This would match all songs added as files to the library that are not placed under the folders for podcasts, audiobooks. \"Unplayed podcasts and audiobooks\" { play_count = 0 and (media_kind is podcast or media_kind is audiobook) } This would match any podcast and audiobook file that was never played with forked-daapd. \"Recently added music\" { media_kind is music order by time_added desc limit 10 } This would match the last 10 music files added to the library. 1.3 Date operand syntax One example of a valid date is a date in yyyy-mm-dd format: \"Files added after January 1, 2004\" { time_added after 2004-01-01 } There are also some special date keywords: * today , yesterday , last week , last month , last year These dates refer to the start of that period; today means 00:00hrs of today, last week means the previous Monday 00:00hrs, last month is the first day of the previous month at 00:00hrs etc. A valid date can also be made by applying an interval to a date. Intervals can be defined as days , weeks , months , years . As an example, a valid date might be: 3 weeks before today or 3 weeks ago Examples: \"Recently Added\" { time_added after 2 weeks ago } This matches all songs added in the last 2 weeks. \"Recently played audiobooks\" { time_played after last week and media_kind is audiobook } This matches all audiobooks played since the start of the last Monday 00:00AM. All dates, except for YYYY-DD-HH , are relative to the day of when forked-daapd evaluates the smartpl query; time_added after today run on a Monday would match against items added since Monday 00:00hrs and evaluating the same smartpl on Friday would only match against added on Friday 00:00hrs. Note that time_added after 4 weeks ago and time_added after last month are subtly different; the former is exactly 4 weeks ago (from today) whereas the latter is the first day of the previous month. Differences to mt-daapd smart playlists The syntax is really close to the mt-daapd smart playlist syntax (see http://sourceforge.net/p/mt-daapd/code/HEAD/tree/tags/release-0.2.4.2/contrib/mt-daapd.playlist). Even this documentation is based on the file linked above. Some differences are: * only one smart playlist per file * the not operator must be placed before an expression and not before the operator * \"||\", \"&&\", \"!\" are not supported (use \"or\", \"and\", \"not\") * comments are not supported","title":"SMARTPL"},{"location":"README_SMARTPL/#1-forked-daapd-smart-playlists","text":"To add a smart playlist to forked-daapd, create a new text file with a filename ending with .smartpl; the filename doesn't matter, only the .smartpl ending does. The file must be placed somewhere in your library folder.","title":"1. forked-daapd smart playlists"},{"location":"README_SMARTPL/#11-syntax","text":"The contents of a smart playlist must follow the syntax: \"Playlist Name\" { expression } There is exactly one smart playlist allowed for a .smartpl file. An expression consists of: field-name operator operand Where valid field-names (with their types) are: * artist (string) * album_artist (string) * album (string) * title (string) * genre (string) * composer (string) * path (string) * type (string) * grouping (string) * data_kind (enumeration) * media_kind (enumeration) * play_count (integer) * skip_count (integer) * rating (integer) * year (integer) * compilation (integer) * track (integer) * disc (integer) * time_added (date) * time_modified (date) * time_played (date) * time_skipped (date) Valid operators include: * is , includes , starts with (string) * > , < , <= , >= , = (int) * after , before (date) * is (enumeration) The is operator must exactly match the field value, while the includes operator matches a substring. The starts with operator matches, if the value starts with the given prefix. All three matches are case-insensitive. Valid operands include: * \"string value\" (string) * integer (int) Valid operands for the enumeration data_kind are: * file * url * spotify * pipe Valid operands for the enumeration media_kind are: * music * movie * podcast * audiobook * tvshow Multiple expressions can be anded or ored together, using the keywords OR and AND . The unary not operator is also supported using the keyword NOT . It is possible to define the sort order and limit the number of items by adding an order clause and/or a limit clause after the last expression: \"Playlist Name\" { expression ORDER BY field-name sort-direction LIMIT limit } \"sort-direction\" is either ASC (ascending) or DESC (descending). \"limit\" is the maximum number of items.","title":"1.1 Syntax"},{"location":"README_SMARTPL/#12-examples","text":"\"techno\" { genre includes \"techno\" and artist includes \"zombie\" } This would match songs by \"Rob Zombie\" or \"White Zombie\", as well as those with a genre of \"Techno-Industrial\" or \"Trance/Techno\", for example. \"techno 2015\" { genre includes \"techno\" and artist includes \"zombie\" and not genre includes \"industrial\" } This would exclude e. g. songs with the genre \"Techno-Industrial\". \"Local music\" { data_kind is file and media_kind is music } This would match all songs added as files to the library that are not placed under the folders for podcasts, audiobooks. \"Unplayed podcasts and audiobooks\" { play_count = 0 and (media_kind is podcast or media_kind is audiobook) } This would match any podcast and audiobook file that was never played with forked-daapd. \"Recently added music\" { media_kind is music order by time_added desc limit 10 } This would match the last 10 music files added to the library.","title":"1.2 Examples"},{"location":"README_SMARTPL/#13-date-operand-syntax","text":"One example of a valid date is a date in yyyy-mm-dd format: \"Files added after January 1, 2004\" { time_added after 2004-01-01 } There are also some special date keywords: * today , yesterday , last week , last month , last year These dates refer to the start of that period; today means 00:00hrs of today, last week means the previous Monday 00:00hrs, last month is the first day of the previous month at 00:00hrs etc. A valid date can also be made by applying an interval to a date. Intervals can be defined as days , weeks , months , years . As an example, a valid date might be: 3 weeks before today or 3 weeks ago Examples: \"Recently Added\" { time_added after 2 weeks ago } This matches all songs added in the last 2 weeks. \"Recently played audiobooks\" { time_played after last week and media_kind is audiobook } This matches all audiobooks played since the start of the last Monday 00:00AM. All dates, except for YYYY-DD-HH , are relative to the day of when forked-daapd evaluates the smartpl query; time_added after today run on a Monday would match against items added since Monday 00:00hrs and evaluating the same smartpl on Friday would only match against added on Friday 00:00hrs. Note that time_added after 4 weeks ago and time_added after last month are subtly different; the former is exactly 4 weeks ago (from today) whereas the latter is the first day of the previous month.","title":"1.3 Date operand syntax"},{"location":"README_SMARTPL/#differences-to-mt-daapd-smart-playlists","text":"The syntax is really close to the mt-daapd smart playlist syntax (see http://sourceforge.net/p/mt-daapd/code/HEAD/tree/tags/release-0.2.4.2/contrib/mt-daapd.playlist). Even this documentation is based on the file linked above. Some differences are: * only one smart playlist per file * the not operator must be placed before an expression and not before the operator * \"||\", \"&&\", \"!\" are not supported (use \"or\", \"and\", \"not\") * comments are not supported","title":"Differences to mt-daapd smart playlists"}]}